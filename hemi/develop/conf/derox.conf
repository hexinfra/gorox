// Config for Derox. See "SYNTAX.md" file for syntax help.

stage {
	.logFile = @logsDir + "/derox-worker.log"

	fixtures {
		http1 {}
		http2 {}
		http3 {}
		quic {}
		tcps {}
		udps {}
	}
	unitures {
	}

	backends {
		tcpsBackend "t1b" {
			.nodes = (
				["address": "127.0.0.1:3306", "weight": 1],
			)
		}
		tcpsBackend "t2b" {
			.balancer = "random"
			.nodes    = (
				["address": "127.0.0.1:9000", "weight": 1],
				["address": "127.0.0.1:9000", "weight": 2],
				["address": "127.0.0.1:9000", "weight": 1],
			)
		}
		http1Backend "h1b" {
			.balancer          = "roundRobin"
			.idleTimeout       = 4s
			.maxStreamsPerConn = 1000
			.nodes             = (
				["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
				["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
			)
		}
	}
	meshers {
		quicMesher "quic1" {
			.address = ":8877"
			dealets {}
			editors {}
			cases {
				/*
				case %conn_xx == "xx" {
				}
				case %stream_yy = ""yy" {
				}
				*/
			}
		}
		tcpsMesher "tcps1" {
			.address = ":8899"
			dealets {}
			editors {}
			cases {
				/*
				case %srcHost == "192.168.1.2" {
					fooEditor {}
				}
				case %hostname == "abc.com" {
					barEditor {}
				}
				case {
					tcpsProxy {
						.toBackend = "t1b"
					}
				}
				*/
			}
		}
		udpsMesher "udps1" {
			.address = ":8866"
			dealets {}
			editors {}
			cases {}
		}
	}

	staters {
		localStater "ls1" {
		}
	}
	cachers {
		localCacher "lc1" {
		}
	}

	apps {
		app "testee" {
			.hostnames = ("*")
			.webRoot   = @baseDir + "/hemi/develop/apps/testee/root"
			rules {
				rule %hostname == ("hello.gorox.net") {
					http1Proxy {
						.toBackend  = "h1b"
						.withCacher = "lc1"
						.hostname   = ""      // if empty, use %hostname
						.colonPort  = ":3080" // if empty, use %colonPort
						.bufferServerContent = false
						.delRequestHeaders = ("header1", "header2")
						.addRequestHeaders = (
							("field1", "value1"),
							("field2", "value2"),
						)
						.delResponseHeaders = ("header3", "header4")
						.addResponseHeaders = (
							("field3", "value3"),
							("field4", "value4")
						)
					}
				}
				rule %hostname == "127.0.0.1" {
					http1Proxy {
						.toBackend = "h1b"
						//.bufferClientContent = false
						.bufferServerContent = false
					}
				}
				rule %path == "/fcgi" {
					fcgiAgent {
						.toBackend = "t2b"
					}
				}
				rule %path == "/favicon.ico" {
					faviconHandlet {}
				}
				rule %path == "/xx" {
					.returnCode = 200
					.returnText = "bye bye"
				}
				rule {
					testHandlet {}
					#wrapReviser {}
				}
			}
		}
	}

	svcs {
		svc "testee" {
			//.aa = "bb"
		}
	}

	servers {
		httpxServer "main" {
			.address           = ":4080"
			.forApps           = ("testee")
			.forSvcs           = ("testee")
			.numGates          = 2
			.maxConnsPerGate   = 10000
			.maxStreamsPerConn = 10000
			.readTimeout       = 60s
			.writeTimeout      = 60s
			.enableTCPTun      = false
			.enableUDPTun      = false
			.tlsMode           = false
			.enableHTTP2       = false
			.h2cMode           = false
		}
		echoServer "echo" {
			.address = ":4007"
		}
	}

	cronjobs {
	}
}
