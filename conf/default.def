// This file shows definitions of all components and properties in Gorox, with their default values.

stage {
	.logFile = %logsDir + "/worker.log"
	.cpuFile = %tempDir + "/cpu.prof"
	.hepFile = %tempDir + "/hep.prof"
	.thrFile = %tempDir + "/thr.prof"
	.grtFile = %tempDir + "/grt.prof"
	.blkFile = %tempDir + "/blk.prof"

	// fixtures
	clock {
	}
	fcache { // singleton, only one is allowed in stage.
		.smallFileSize = 65535
		.maxSmallFiles = 1000
		.maxLargeFiles = 500
		.cacheTimeout  = 1s
	}
	resolver { // singleton, only one is allowed in stage.
	}
	http1Outgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/http/http1Outgate/h1o" 
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	http2Outgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/http/http2Outgate/h2o"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	http3Outgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/http/http3Outgate/h3o"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	hweb2Outgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/http/hweb2Outgate/hweb2O"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	quicOutgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
	}
	tcpsOutgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
		.maxStreamsPerConn = 1000
	}
	udpsOutgate { // singleton, only one is allowed in stage.
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.idleTimeout = 4s
	}

	// unitures
	demoUniture { // singleton, only one is allowed in stage.
	}

	// backends
	http1Backend "h1b" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h1b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "roundRobin"
	}
	http2Backend "h2b" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h2b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "roundRobin"
	}
	http3Backend "h3b" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h3b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "ipHash"
	}
	hweb2Backend "b2b" {
	}
	quicBackend "qb" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.balancer = "random"
	}

	tcpsBackend "tb" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.balancer = "random"
	}
	udpsBackend "ub" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 4s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.balancer = "random"
	}

	// meshers
	quicMesher "qm" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000
		// cases
	}
	tcpsMesher "tm" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000
		// cases
	}
	udpsMesher "um" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000
		// cases
	}

	// staters
	localStater "ls" {
		.stateDir = %VarsDir + "/staters/ls"
	}
	redisStater "rs" {
	}

	// cachers
	localCacher "lc" {
		.cacheDir = %VarsDir + "/cacheDir/lc"
	}
	memCacher "mc" {
	}
	redisCacher "rc" {
	}

	// apps
	app "a" {
		.hostnames            = ("*")
		.webRoot              = ""
		.file404              = ""
		.tlsCertificate       = ""
		.tlsPrivateKey        = ""
		.accessLog            = ()
		.logFormat            = ""
		.maxMemoryContentSize = 16M
		.maxUploadContentSize = 128M
		.settings             = []
		.proxyOnly            = false
		.withStater           = "ls"
		.saveContentFilesDir  = %tempDir + "/apps/a"

		// handlets
		accessChecker "ah" {
		}
		hostnameChecker "hh" {
			.hostname = "www.example.cpm"
			.permanent = true
		}
		httpsChecker "hh" {
			.authority = "www.example.cpm"
			.permanent = true
		}
		limitChecker "lh" {
		}
		refererChecker "rh" {
		}
		rewriter "rh" {
		}
		ajpAgent "ah" {
		}
		favicon "fh" {
		}
		fcgiAgent "fh" {
			.saveContentFilesDir = %tempDir + "/fcgi/fh"
			.toBackend = "php-fpm"
			.sendTimeout = 60s
			.recvTimeout = 60s
			.scriptFilename = "action.php" // Notice: always use "action.php"
			.indexFile = "index.php"
			.keepConn = true
			.bufferClientContent = true
			.bufferServerContent = true
			.preferUnderscore = true
			.withCacher = "cacher name"
		}
		uwsgiAgent "uh" {
		}
		webdavHandlet "wh" {
		}

		http1Proxy "hh" {
			.proxyMode = "reverse"
			.toBackend = "proxy_name"
			.viaName = "gorox"
			.bufferClientContent = true
			.bufferServerContent = true
			.delRequestHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addRequestHeaders = (
				["x-root-id" : "xxx-xxx-xxx-xxx"],
			)

			.delResponseHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addResponseHeaders = (
				["cache-control" : "max-age=86400"],
			)
		}
		http2Proxy "hh" {
			.proxyMode = "reverse"
			.toBackend = "proxy_name"
			.viaName = "gorox"
			.bufferClientContent = true
			.bufferServerContent = true
			.delRequestHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addRequestHeaders = (
				["x-root-id" : "xxx-xxx-xxx-xxx"],
			)

			.delResponseHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addResponseHeaders = (
				["cache-control" : "max-age=86400"],
			)
		}
		http3Proxy "hh" {
		}
		hweb2Proxy "bh" {
		}

		sitex "sh" {
			.rdbms = "mysql://user:pass@host:port/dbname?charset=utf8mb4"
			.sites = [
				"front": [
					"hostnames": ("gorox.net"),
					"viewDir": %baseDir + "/apps/en_us/view",
					"settings": [
						"en_us": "gorox.net",
						"zh_cn": "www.gorox.net",
					],
				],
			]
		}

		static "sh" {
			.webRoot = "/var/www"
			.indexFile = "index.html"
			.autoIndex = true
			.mimeTypes = [
				"jpg": "image/jpeg",
				"jpeg": "image/jpeg",
			]
			.defaultType = "application/octet-stream"
		}

		// revisers
		gzipReviser "gr" {
			.compressLevel = 1
			.minLength = 8k 
			.onContentTypes = ("text/html") 
		}
		headReviser "hr" {
			.addResponse = ["cache-control" : "max-age=86400"]
			.addRequest = ["env" : "gray"]
			.delRequest = ("cookie", "date")
			.delResponse = ("cookie", "date")
		}
		replaceReviser "rr" {
		}
		ssiReviser "sr" {
		}
		wrapReviser "wr" {
		}

		// socklets
		helloSocklet "hs" {
		}
		sock1Proxy "s1p" {
		}
		sock2Proxy "s2p" {
		}
		sock3Proxy "s3p" {
		}

		// rules
		rule "r1" condition {
		}
		rule $path == "/phpstatus" { 
			fcgiAgent {
				.toBackend = "fpm"
			}
		}
		rule $path == "/favicon.ico" { // favicon.ico  doesnot record logAccess
			.logAccess = false
		}
		rule $path ^= "/user/" { // /user/xxxx forward user center server
			http1Proxy { 
				.toBackend = "user_center"
			}
		}
		rule $path ^= "/order/" { // /order/xxxx forward order server
			http1Proxy {
				.toBackend = "order_server"
			}
		}
		rule $path $= (".doc", ".docx", ".pdf") { // Forbidden
			.returnCode = 403
		}
		rule $path ^= ("/favicon.ico", "/robots.txt", "/static/") { // http cache
			static {}
			headReviser {
				.addResponse = ["cache-control" : "max-age=86400"]
			}
		}
		rule $path ~= "\.php$" { // forward php requests
			fcgiAgent {
				.toBackend = "fpm"
			}
		}
		rule $queryString ~= "version=4.11" { // match url query
			.returnCode = 302
			headReviser {
				.addResponse = ["Location" : "/upgrade.html"]
			}
		}
		rule $path !-e { // file path change
			.returnCode = 302
			headReviser {
				.addResponse = ["Location" : "new_path"]
			}
		}
		rule $path -d { // autoIndex
			static {
				.autoIndex = true
			}
		}
	}

	// svcs
	svc "s" {
		withStater = "Stater name"
		maxContentSize = 16G
	}

	// servers
	echoServer "es" {
	}
	http3Server "h3s" {
	}

	httpxServer "hxs" {
		.forApps         = ("foo", "bar")
		.forSvcs         = ()
		.address         = string,required
		.hrpcMode        = false
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000
		.enableTCPTun    = false
		.enableUDPTun    = false
		.maxContentSize  = 1T
		.recvTimeout     = 120s
		.sendTimeout     = 120s
		.forceScheme     = ""
		.adjustScheme    = true
		.enableHTTP2     = false
		.h2cMode         = false
	}

	hweb2Server "b2s" {
	}
	socksServer "ss" {
	}

	// cronjobs
	cleanCronjob { // singleton, only one is allowed in stage.
	}
	statCronjob { // singleton, only one is allowed in stage.
	}
}
