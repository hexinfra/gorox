// Config for Derox. See "SYNTAX.md" file for syntax help.

stage {
	logFile = @logsDir + "/derox-worker.log"

	fixtures {
		http1 {}
		http2 {}
		http3 {}
		quic {}
		tcps {}
		udps {}
	}
	optwares {
	}

	backends {
		tcpsBackend "t1b" {
			balancer = "random"
			nodes    = (
				["address": "127.0.0.1:9000", "weight": 1],
				["address": "127.0.0.1:9000", "weight": 2],
				["address": "127.0.0.1:9000", "weight": 1],
			)
		}
		tcpsBackend "t2b" {
			nodes = (
				["address": "127.0.0.1:3306", "weight": 1],
			)
		}
		http1Backend "h1b" {
			balancer          = "roundRobin"
			aliveTimeout      = 4s
			maxStreamsPerConn = 1000
			nodes             = (
				["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
				["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
			)
		}
	}
	meshers {
		quicMesher "quic" {
			address = ":8877"
			runners {}
			filters {}
			cases {
				/*
				connCase %xx == "xx" {
				}
				streamCase %yy = ""yy" {
				}
				*/
			}
		}
		tcpsMesher "tcp1" {
			address = ":8899"
			runners {}
			filters {}
			cases {
				/*
				case %srcHost == "192.168.1.2" {
					//fooFilter {}
				}
				case %hostname == "abc.com" {
					//barFilter {}
				}
				case {
					tcpsProxy {
						toBackend = "t1"
					}
				}
				*/
			}
		}
		udpsMesher "udp1" {
			address = ":8866"
			runners {}
			filters {}
			cases {
				/*
				connCase ... {}
				dataCase ... {}
				*/
			}
		}
	}

	staters {
		localStater "ls1" {
		}
	}
	cachers {
		localCacher "lc1" {
		}
	}

	apps {
		app "tests" {
			hostnames = ("*")
			webRoot   = @baseDir + "/hemi/develop/apps/tests/web"
			rules {
				rule %hostname == ("h1b.com", "hello.gorox.net") {
					http1Proxy {
						toBackend  = "h1b"
						withCacher = "lc1"
						bufferServerContent = false
						delRequestHeaders = ("header1", "header2")
						addRequestHeaders = (
							("field1", "value1"),
							("field2", "value2"),
						)
						delResponseHeaders = ("header3", "header4")
						addResponseHeaders = (
							("field3", "value3"),
							("field4", "value4")
						)
					}
				}
				rule %hostname == "127.0.0.1" {
					http1Proxy {
						toBackend = "h1b"
						//bufferClientContent = false
						bufferServerContent = false
					}
				}
				rule %path == "/fcgi" {
					fcgiProxy {
						toBackend = "t1b"
					}
				}
				rule %path == "/favicon.ico" {
					faviconHandlet {}
				}
				rule %path == "/xx" {
					returnCode = 200
					returnText = "bye bye"
				}
				rule {
					testHandlet {}
					//wrapReviser {}
				}
			}
		}
	}
	appServers = [
		"tests": ("main"),
	]

	svcs {
		svc "tests" {
		}
	}
	svcServers = [
		"tests": ("main"),
	]

	servers {
		httpxServer "main" {
			address           = ":4080"
			numGates          = 2
			maxConnsPerGate   = 10000
			maxStreamsPerConn = 10000
			readTimeout       = 60s
			writeTimeout      = 60s
			enableTCPTun      = false
			enableUDPTun      = false
			tlsMode           = false
			strictScheme      = false
			enableHTTP2       = false
			h2cMode           = false
		}
		echoServer "echo" {
			address = ":4007"
		}
	}

	cronjobs {
	}
}
