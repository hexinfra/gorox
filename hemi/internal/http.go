// Copyright (c) 2020-2022 Zhang Jingcheng <diogin@gmail.com>.
// Copyright (c) 2022-2023 HexInfra Co., Ltd.
// All rights reserved.
// Use of this source code is governed by a BSD-style license that can be found in the LICENSE.md file.

// General HTTP protocol elements, incoming message and outgoing message implementation.

package internal

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/hexinfra/gorox/hemi/libraries/risky"
	"io"
	"net"
	"os"
	"strconv"
	"time"
)

// keeper is an httpServer or httpClient which keeps http connections and streams.
type keeper interface {
	Stage() *Stage
	TLSMode() bool
	ReadTimeout() time.Duration
	WriteTimeout() time.Duration
	MaxContentSize() int64
	SaveContentFilesDir() string
	RecvTimeout() time.Duration
	SendTimeout() time.Duration
}

// keeper_ is the mixin for httpServer_ and httpClient_.
type keeper_ struct {
	// States
	maxContentSize int64         // max content size allowed
	recvTimeout    time.Duration // timeout to recv the whole message content
	sendTimeout    time.Duration // timeout to send the whole message
}

func (k *keeper_) MaxContentSize() int64      { return k.maxContentSize }
func (k *keeper_) RecvTimeout() time.Duration { return k.recvTimeout }
func (k *keeper_) SendTimeout() time.Duration { return k.sendTimeout }

// stream is the HTTP request-response exchange and the interface for *http[1-3]Stream and *H[1-3]Stream.
type stream interface {
	keeper() keeper
	peerAddr() net.Addr

	smallBuffer() []byte
	unsafeMake(size int) []byte
	makeTempName(p []byte, stamp int64) (from int, edge int)

	setReadDeadline(deadline time.Time) error
	setWriteDeadline(deadline time.Time) error

	read(p []byte) (int, error)
	readFull(p []byte) (int, error)
	write(p []byte) (int, error)
	writev(vector *net.Buffers) (int64, error)

	isBroken() bool // if either side is broken, then the stream is broken
	markBroken()
}

// stream is the mixin for httpStream_ and hStream_.
type stream_ struct {
	// Stream states (buffers)
	stockBuffer [256]byte // a (fake) buffer to workaround Go's conservative escape analysis. must be 256 bytes so names can be placed into
	// Stream states (controlled)
	// Stream states (non-zeros)
	region Region // a region-based memory pool
	// Stream states (zeros)
	httpMode int8 // http mode of current stream. see httpModeXXX
}

func (s *stream_) onUse() { // for non-zeros
	s.region.Init()
	s.httpMode = httpModeNormal
}
func (s *stream_) onEnd() { // for zeros
	s.region.Free()
}

func (s *stream_) smallBuffer() []byte        { return s.stockBuffer[:] }
func (s *stream_) unsafeMake(size int) []byte { return s.region.Make(size) }

// httpIn is a *http[1-3]Request or *H[1-3]Response, used as shell by httpIn_.
type httpIn interface {
	ContentSize() int64
	isUnsized() bool
	readContent() (p []byte, err error)
	applyTrailer(trailer *pair) bool
	HasTrailers() bool
	forTrailers(fn func(trailer *pair, name []byte, value []byte) bool) bool
	arrayCopy(p []byte) bool
	saveContentFilesDir() string
}

// httpIn_ is a mixin for httpRequest_ and hResponse_.
type httpIn_ struct { // incoming. needs parsing
	// Assocs
	shell  httpIn // *http[1-3]Request or *H[1-3]Response
	stream stream // *http[1-3]Stream or *H[1-3]Stream
	// Stream states (buffers)
	stockInput  [1536]byte // for r.input
	stockArray  [768]byte  // for r.array
	stockParas  [16]para   // for r.paras
	stockPrimes [40]pair   // for r.primes
	stockExtras [24]pair   // for r.extras
	// Stream states (controlled)
	mainPair       pair     // to overcome the limitation of Go's escape analysis when receiving queries, headers, cookies, forms, and trailers
	contentCodings [4]uint8 // content-encoding flags, controlled by r.nContentCodings. see httpCodingXXX. values: none compress deflate gzip br
	acceptCodings  [4]uint8 // accept-encoding flags, controlled by r.nAcceptCodings. see httpCodingXXX. values: identity(none) compress deflate gzip br
	// Stream states (non-zeros)
	input          []byte        // bytes of incoming message heads. [<r.stockInput>/4K/16K]
	array          []byte        // store path, queries, extra queries & headers & cookies & trailers, forms, metadata of uploads, and trailers. [<r.stockArray>/4K/16K/64K1/(make <= 1G)]
	paras          []para        // hold field parameters. [<r.stockParas>/max]
	primes         []pair        // hold prime queries, headers(main+subs), cookies, forms, and trailers(main+subs). [<r.stockPrimes>/max]
	extras         []pair        // hold extra queries, headers(main+subs), cookies, forms, and trailers(main+subs). [<r.stockExtras>/max]
	recvTimeout    time.Duration // timeout to recv the whole message content
	maxContentSize int64         // max content size allowed for current message. if content is unsized, size is calculated when receiving chunks
	contentSize    int64         // info of incoming content. >=0: content size, -1: no content, -2: unsized content
	versionCode    uint8         // Version1_0, Version1_1, Version2, Version3
	asResponse     bool          // treat the incoming message as response?
	keepAlive      int8          // HTTP/1 only. -1: no connection header, 0: connection close, 1: connection keep-alive
	_              byte          // padding
	headResult     int16         // result of receiving message head. values are same as http status for convenience
	bodyResult     int16         // result of receiving message body. values are same as http status for convenience
	// Stream states (zeros)
	failReason  string    // the reason of headResult or bodyResult
	inputNext   int32     // HTTP/1 request only. next request begins from r.input[r.inputNext]. exists because HTTP/1 supports pipelining
	inputEdge   int32     // edge position of current message head is at r.input[r.inputEdge]
	bodyWindow  []byte    // a window used for receiving content. sizes must be same with r.input for HTTP/1. [HTTP/1=<none>/16K, HTTP/2/3=<none>/4K/16K/64K1]
	recvTime    time.Time // the time when receiving message
	bodyTime    time.Time // the time when first body read operation is performed on this stream
	contentBlob []byte    // if loadable, the received and loaded content of current message is at r.contentBlob[:r.receivedSize]. [<none>/r.input/4K/16K/64K1/(make)]
	contentHeld *os.File  // used by r.holdContent(), if content is TempFile. will be closed on stream ends
	httpIn0               // all values must be zero by default in this struct!
}
type httpIn0 struct { // for fast reset, entirely
	pBack            int32   // element begins from. for parsing control & headers & content & trailers elements
	pFore            int32   // element spanning to. for parsing control & headers & content & trailers elements
	head             text    // head (control + headers) of current message -> r.input. set after head is received. only for debugging
	imme             text    // HTTP/1 only. immediate data after current message head is at r.input[r.imme.from:r.imme.edge]
	hasExtras        [8]bool // 0:queries 1:headers 2:cookies 3:forms 4:trailers 5:not-defined 6:not-defined 7:not-defined
	dateTime         int64   // parsed unix time of date
	arrayEdge        int32   // next usable position of r.array is at r.array[r.arrayEdge]. used when writing r.array
	arrayKind        int8    // kind of current r.array. see arrayKindXXX
	receiving        int8    // currently receiving. see httpSectionXXX
	headers          zone    // headers ->r.primes
	hasRevisers      bool    // are there any revisers hooked on this incoming message?
	upgradeSocket    bool    // upgrade: websocket?
	upgradeUDPTun    bool    // upgrade: connect-udp?
	acceptGzip       bool    // does peer accept gzip content coding? i.e. accept-encoding: gzip, deflate
	acceptBrotli     bool    // does peer accept brotli content coding? i.e. accept-encoding: gzip, br
	nContentCodings  int8    // num of content-encoding flags, controls r.contentCodings
	nAcceptCodings   int8    // num of accept-encoding flags, controls r.acceptCodings
	iContentLength   uint8   // index of content-length header in r.primes
	iContentLocation uint8   // index of content-location header in r.primes
	iContentRange    uint8   // index of content-range header in r.primes
	iContentType     uint8   // index of content-type header in r.primes
	iDate            uint8   // index of date header in r.primes
	_                [2]byte // padding
	zConnection      zone    // zone of connection headers in r.primes. may not be continuous
	zContentLanguage zone    // zone of content-language headers in r.primes. may not be continuous
	zTrailer         zone    // zone of trailer headers in r.primes. may not be continuous
	zVia             zone    // zone of via headers in r.primes. may not be continuous
	contentReceived  bool    // is content received? if message has no content, it is true (received)
	contentBlobKind  int8    // kind of current r.contentBlob if it is a blob. see httpContentBlobXXX
	receivedSize     int64   // bytes of currently received content. used by both sized & unsized content receiver
	chunkSize        int64   // left size of current chunk if the chunk is too large to receive in one call. HTTP/1.1 chunked only
	cBack            int32   // for parsing chunked elements. HTTP/1.1 chunked only
	cFore            int32   // for parsing chunked elements. HTTP/1.1 chunked only
	chunkEdge        int32   // edge position of the filled chunked data in r.bodyWindow. HTTP/1.1 chunked only
	transferChunked  bool    // transfer-encoding: chunked? HTTP/1.1 only
	overChunked      bool    // for HTTP/1.1 requests, if chunked receiver over received in r.bodyWindow, then r.bodyWindow will be used as r.input on ends
	trailers         zone    // trailers -> r.primes. set after trailer section is received and parsed
}

func (r *httpIn_) onUse(maxContentSize int64, versionCode uint8, asResponse bool) { // for non-zeros
	if versionCode >= Version2 || asResponse {
		r.input = r.stockInput[:]
	} else {
		// HTTP/1 supports request pipelining, so r.input and r.inputEdge are not reset here.
	}
	r.array = r.stockArray[:]
	r.paras = r.stockParas[0:0:cap(r.stockParas)]    // use append()
	r.primes = r.stockPrimes[0:1:cap(r.stockPrimes)] // use append(). r.primes[0] is skipped due to zero value of pair indexes.
	r.extras = r.stockExtras[0:0:cap(r.stockExtras)] // use append()
	r.recvTimeout = r.stream.keeper().RecvTimeout()
	r.maxContentSize = maxContentSize
	r.contentSize = -1 // no content
	r.versionCode = versionCode
	r.asResponse = asResponse
	r.keepAlive = -1 // no connection header
	r.headResult = StatusOK
	r.bodyResult = StatusOK
}
func (r *httpIn_) onEnd() { // for zeros
	if r.versionCode >= Version2 || r.asResponse { // as we don't use pipelining for outgoing requests, so responses are not pipelined.
		if cap(r.input) != cap(r.stockInput) {
			PutNK(r.input)
		}
		r.input, r.inputEdge = nil, 0
	} else {
		// HTTP/1 supports request pipelining, so r.input and r.inputEdge are not reset here.
	}
	if r.arrayKind == arrayKindPool {
		PutNK(r.array)
	}
	r.array = nil // other array kinds are only references, just reset.
	if cap(r.paras) != cap(r.stockParas) {
		putParas(r.paras)
		r.paras = nil
	}
	if cap(r.primes) != cap(r.stockPrimes) {
		putPairs(r.primes)
		r.primes = nil
	}
	if cap(r.extras) != cap(r.stockExtras) {
		putPairs(r.extras)
		r.extras = nil
	}

	r.failReason = ""

	if r.inputNext != 0 { // only happens in HTTP/1.1 request pipelining
		if r.overChunked { // only happens in HTTP/1.1 chunked mode
			// Use bytes over received in r.bodyWindow as new r.input.
			// This means the size list for r.bodyWindow must sync with r.input!
			if cap(r.input) != cap(r.stockInput) {
				PutNK(r.input)
			}
			r.input = r.bodyWindow // use r.bodyWindow as new r.input
		}
		// slide r.input. r.inputNext and r.inputEdge have already been set
		copy(r.input, r.input[r.inputNext:r.inputEdge])
		r.inputEdge -= r.inputNext
		r.inputNext = 0
	} else if r.bodyWindow != nil { // r.bodyWindow was used to receive content and failed to free. we free it here.
		PutNK(r.bodyWindow)
	}
	r.bodyWindow = nil

	r.recvTime = time.Time{}
	r.bodyTime = time.Time{}

	if r.contentBlobKind == httpContentBlobPool {
		PutNK(r.contentBlob)
	}
	r.contentBlob = nil // other blob kinds are only references, just reset.

	if r.contentHeld != nil { // r.holdContent() is called
		r.contentHeld.Close()
		if IsDebug(2) {
			Debugln("contentHeld is left as is!")
		} else if err := os.Remove(r.contentHeld.Name()); err != nil {
			// TODO: log?
		}
		r.contentHeld = nil
	}

	r.httpIn0 = httpIn0{}
}

func (r *httpIn_) UnsafeMake(size int) []byte { return r.stream.unsafeMake(size) }
func (r *httpIn_) PeerAddr() net.Addr         { return r.stream.peerAddr() }

func (r *httpIn_) VersionCode() uint8    { return r.versionCode }
func (r *httpIn_) IsHTTP1_0() bool       { return r.versionCode == Version1_0 }
func (r *httpIn_) IsHTTP1_1() bool       { return r.versionCode == Version1_1 }
func (r *httpIn_) IsHTTP1() bool         { return r.versionCode == Version1_1 || r.versionCode == Version1_0 }
func (r *httpIn_) IsHTTP2() bool         { return r.versionCode == Version2 }
func (r *httpIn_) IsHTTP3() bool         { return r.versionCode == Version3 }
func (r *httpIn_) Version() string       { return httpVersionStrings[r.versionCode] }
func (r *httpIn_) UnsafeVersion() []byte { return httpVersionByteses[r.versionCode] }

func (r *httpIn_) AddHeader(name string, value string) bool { // as extra
	// TODO: add restrictions on what headers are allowed to add? should we check the value?
	// TODO: parse and check?
	// setFlags?
	return r.addExtra(name, value, 0, kindHeader)
}
func (r *httpIn_) HasHeaders() bool                  { return r.hasPairs(r.headers, kindHeader) }
func (r *httpIn_) AllHeaders() (headers [][2]string) { return r.allPairs(r.headers, kindHeader) }
func (r *httpIn_) H(name string) string {
	value, _ := r.Header(name)
	return value
}
func (r *httpIn_) Hstr(name string, defaultValue string) string {
	if value, ok := r.Header(name); ok {
		return value
	}
	return defaultValue
}
func (r *httpIn_) Hint(name string, defaultValue int) int {
	if value, ok := r.Header(name); ok {
		if i, err := strconv.Atoi(value); err == nil {
			return i
		}
	}
	return defaultValue
}
func (r *httpIn_) Header(name string) (value string, ok bool) {
	v, ok := r.getPair(name, 0, r.headers, kindHeader)
	return string(v), ok
}
func (r *httpIn_) UnsafeHeader(name string) (value []byte, ok bool) {
	return r.getPair(name, 0, r.headers, kindHeader)
}
func (r *httpIn_) Headers(name string) (values []string, ok bool) {
	return r.getPairs(name, 0, r.headers, kindHeader)
}
func (r *httpIn_) HasHeader(name string) bool {
	_, ok := r.getPair(name, 0, r.headers, kindHeader)
	return ok
}
func (r *httpIn_) DelHeader(name string) (deleted bool) {
	// TODO: add restrictions on what headers are allowed to del?
	return r.delPair(name, 0, r.headers, kindHeader)
}
func (r *httpIn_) delHeader(name []byte, hash uint16) {
	r.delPair(risky.WeakString(name), hash, r.headers, kindHeader)
}
func (r *httpIn_) delHopHeaders() { // used by proxies
	r._delHopFields(r.headers, kindHeader, r.delHeader)
}
func (r *httpIn_) forHeaders(fn func(header *pair, name []byte, value []byte) bool) bool { // by httpOut.copyHeadFrom(). excluding sub headers
	return r._forMainFields(r.headers, kindHeader, fn)
}

func (r *httpIn_) ContentSize() int64 { return r.contentSize }
func (r *httpIn_) UnsafeContentLength() []byte {
	if r.iContentLength == 0 {
		return nil
	}
	return r.primes[r.iContentLength].valueAt(r.input)
}
func (r *httpIn_) ContentType() string { return string(r.UnsafeContentType()) }
func (r *httpIn_) UnsafeContentType() []byte {
	if r.iContentType == 0 {
		return nil
	}
	return r.primes[r.iContentType].dataAt(r.input)
}

func (r *httpIn_) _parseField(field *pair, desc *fdesc, p []byte, fully bool) bool { // data and paras
	field.setParsed()
	if field.value.isEmpty() {
		if desc.allowEmpty {
			field.dataEdge = field.value.edge
			return true
		} else {
			r.failReason = "field can't be empty"
			return false
		}
	}
	text := field.value
	if p[text.from] != '"' { // normal text
	forData:
		for spat := int32(0); text.from < field.value.edge; text.from++ {
			switch b := p[text.from]; b {
			default:
				spat = 0
			case ' ', '\t':
				if spat == 0 {
					spat = text.from
				}
			case ';':
				if spat == 0 {
					field.dataEdge = text.from
				} else {
					field.dataEdge = spat
				}
				//Debugf("3=%s\n", string(field.dataAt(p)))
				break forData
			case ',':
				if fully {
					spat = 0
				} else {
					field.dataEdge = text.from
					field.value.edge = text.from
					//Debugf("1=%s\n", string(field.dataAt(p)))
					return true
				}
			case '(':
				if desc.hasComment {
					text.from++
					for {
						if text.from == field.value.edge {
							r.failReason = "bad comment"
							return false
						}
						if p[text.from] == ')' {
							break
						}
						text.from++
					}
				} else {
					spat = 0
				}
			}
		}
		if text.from == field.value.edge { // exact data
			field.dataEdge = text.from
			//Debugf("2=%s\n", string(field.dataAt(p)))
			return true
		}
	} else { // begins with '"'
		text.from++
		for {
			if text.from == field.value.edge { // "...
				field.dataEdge = text.from
				//Debugf("4=%s\n", string(field.dataAt(p)))
				return true
			}
			if p[text.from] == '"' {
				break
			}
			text.from++
		}
		// "..."
		if !desc.allowQuote {
			r.failReason = "DQUOTE is not allowed"
			return false
		}
		if text.from-field.value.from == 1 && !desc.allowEmpty { // ""
			r.failReason = "field cannot be empty"
			return false
		}
		field.setQuoted()
		field.dataEdge = text.from
		//Debugf("5=%s\n", string(field.dataAt(p)))
		text.from++
		if text.from == field.value.edge { // exact "..."
			return true
		}
	afterValue:
		for {
			switch b := p[text.from]; b {
			case ';':
				break afterValue
			case ' ', '\t':
				text.from++
			case ',':
				if fully {
					r.failReason = "comma after dquote"
					return false
				} else {
					field.value.edge = text.from
					return true
				}
			default:
				r.failReason = "malformed DQUOTE and normal text"
				return false
			}
			if text.from == field.value.edge {
				return true
			}
		}
	}
	// text.from is at ';'
	if !desc.allowParas {
		r.failReason = "paras is not allowed"
		return false
	}
	for { // each *( OWS ";" OWS [ token "=" ( token / quoted-string ) ] )
		haveSemic := false
	forSemic:
		for {
			if text.from == field.value.edge {
				return true
			}
			switch b := p[text.from]; b {
			case ' ', '\t':
				text.from++
			case ';':
				haveSemic = true
				text.from++
			case ',':
				if fully {
					r.failReason = "invalid parameter"
					return false
				} else {
					field.value.edge = text.from
					return true
				}
			default:
				break forSemic
			}
		}
		if !haveSemic {
			r.failReason = "semicolon required in parameters"
			return false
		}
		// parameter-name = token
		text.edge = text.from
		for {
			if httpTchar[p[text.edge]] == 0 {
				break
			}
			text.edge++
			if text.edge == field.value.edge {
				r.failReason = "only parameter-name is provided"
				return false
			}
		}
		if text.edge == text.from {
			r.failReason = "empty parameter-name is not allowed"
			return false
		}
		if p[text.edge] != '=' {
			r.failReason = "token '=' required"
			return false
		}
		//Debugf("6=%s\n", string(p[text.from:text.edge]))
		text.edge++ // skip '='
		// parameter-value = ( token / quoted-string )
		if text.edge == field.value.edge {
			r.failReason = "missing parameter-value"
			return false
		}
		if p[text.edge] == '"' { // quoted-string
			text.edge++
			text.from = text.edge
			for {
				if text.edge == field.value.edge {
					r.failReason = "invalid quoted-string"
					return false
				}
				if p[text.edge] == '"' {
					break
				}
				text.edge++
			}
			//Debugf("7=%s\n", string(p[text.from:text.edge]))
			text.edge++
		} else { // token
			text.from = text.edge
			for text.edge < field.value.edge && httpTchar[p[text.edge]] != 0 {
				text.edge++
			}
			if text.edge == text.from {
				r.failReason = "empty parameter-value is not allowed"
				return false
			}
			//Debugf("8=%s\n", string(p[text.from:text.edge]))
			if text.edge == field.value.edge {
				return true
			}
		}
		text.from = text.edge
	}
}
func (r *httpIn_) _splitField(field *pair, desc *fdesc, p []byte) bool {
	field.setParsed()
	// RFC 9110 (section 5.6.1.2):
	// In other words, a recipient MUST accept lists that satisfy the following syntax:
	// #element => [ element ] *( OWS "," OWS [ element ] )
	var (
		bakField  pair
		subField  = *field
		numSubs   = 0
		needComma = false
	)
	subField.setSubField()
	for { // each sub value
		haveComma := false
	forComma:
		for subField.value.from < field.value.edge {
			switch b := p[subField.value.from]; b {
			case ' ', '\t':
				subField.value.from++
			case ',':
				haveComma = true
				subField.value.from++
			default:
				break forComma
			}
		}
		if subField.value.from == field.value.edge {
			break
		}
		if needComma && !haveComma {
			r.failReason = "comma needed in multi-value field"
			return false
		}
		subField.value.edge = field.value.edge
		if !r._parseField(&subField, desc, p, false) {
			// r.failReason is set.
			return false
		}
		if numSubs == 0 { // first sub, save as backup
			bakField = subField
		} else { // numSubs >= 1, sub fields exist
			if numSubs == 1 { // got the second sub field
				field.setCommaValue() // mark main field as comma-value
				if !r._addExtra(&bakField) {
					r.failReason = "too many sub fields"
					return false
				}
			}
			if !r._addExtra(&subField) {
				r.failReason = "too many sub fields"
				return false
			}
		}
		numSubs++
		subField.value.from = subField.value.edge
		needComma = true
	}
	if numSubs == 1 {
		if bakField.isQuoted() {
			field.setQuoted()
		}
		field.paras = bakField.paras
		field.dataEdge = bakField.dataEdge
	}
	return true
}

func (r *httpIn_) checkContentLength(header *pair, index uint8) bool { // Content-Length = 1*DIGIT
	// RFC 7230 (section 3.3.2):
	// If a message is received that has multiple Content-Length header
	// fields with field-values consisting of the same decimal value, or a
	// single Content-Length header field with a field value containing a
	// list of identical decimal values (e.g., "Content-Length: 42, 42"),
	// indicating that duplicate Content-Length header fields have been
	// generated or combined by an upstream message processor, then the
	// recipient MUST either reject the message as invalid or replace the
	// duplicated field-values with a single valid Content-Length field
	// containing that decimal value prior to determining the message body
	// length or forwarding the message.
	if r.contentSize == -1 { // r.contentSize can only be -1 or >= 0 here. -2 is set later if the content is unsized
		if size, ok := decToI64(header.valueAt(r.input)); ok {
			r.contentSize = size
			r.iContentLength = index
			return true
		}
	}
	// RFC 7230 (section 3.3.3):
	// If a message is received without Transfer-Encoding and with
	// either multiple Content-Length header fields having differing
	// field-values or a single Content-Length header field having an
	// invalid value, then the message framing is invalid and the
	// recipient MUST treat it as an unrecoverable error.  If this is a
	// request message, the server MUST respond with a 400 (Bad Request)
	// status code and then close the connection.
	r.headResult, r.failReason = StatusBadRequest, "bad content-length"
	return false
}
func (r *httpIn_) checkContentLocation(header *pair, index uint8) bool { // Content-Location = absolute-URI / partial-URI
	if r.iContentLocation == 0 && header.value.notEmpty() {
		r.iContentLocation = index
		return true
	}
	r.headResult, r.failReason = StatusBadRequest, "bad or too many content-location"
	return false
}
func (r *httpIn_) checkContentRange(header *pair, index uint8) bool { // Content-Range = range-unit SP ( range-resp / unsatisfied-range )
	// TODO
	if r.iContentRange == 0 && header.value.notEmpty() {
		r.iContentRange = index
		return true
	}
	r.headResult, r.failReason = StatusBadRequest, "bad or too many content-range"
	return false
}
func (r *httpIn_) checkContentType(header *pair, index uint8) bool { // Content-Type = media-type
	// media-type = type "/" subtype *( OWS ";" OWS parameter )
	// type = token
	// subtype = token
	// parameter = token "=" ( token / quoted-string )
	if r.iContentType == 0 && !header.dataEmpty() {
		r.iContentType = index
		return true
	}
	r.headResult, r.failReason = StatusBadRequest, "bad or too many content-type"
	return false
}
func (r *httpIn_) checkDate(header *pair, index uint8) bool { // Date = HTTP-date
	return r._checkHTTPDate(header, index, &r.iDate, &r.dateTime)
}
func (r *httpIn_) _checkHTTPDate(header *pair, index uint8, pIndex *uint8, toTime *int64) bool { // HTTP-date = day-name "," SP day SP month SP year SP hour ":" minute ":" second SP GMT
	if *pIndex == 0 {
		if httpDate, ok := clockParseHTTPDate(header.valueAt(r.input)); ok {
			*pIndex = index
			*toTime = httpDate
			return true
		}
	}
	r.headResult, r.failReason = StatusBadRequest, "bad http-date"
	return false
}

func (r *httpIn_) checkAcceptEncoding(pairs []pair, from uint8, edge uint8) bool { // Accept-Encoding = #( codings [ weight ] )
	// codings        = content-coding / "identity" / "*"
	// content-coding = token
	for i := from; i < edge; i++ {
		if r.nAcceptCodings == int8(cap(r.acceptCodings)) { // ignore too many codings
			break
		}
		data := pairs[i].dataAt(r.input)
		bytesToLower(data)
		var coding uint8
		if bytes.Equal(data, bytesGzip) {
			r.acceptGzip = true
			coding = httpCodingGzip
		} else if bytes.Equal(data, bytesBrotli) {
			r.acceptBrotli = true
			coding = httpCodingBrotli
		} else if bytes.Equal(data, bytesDeflate) {
			coding = httpCodingDeflate
		} else if bytes.Equal(data, bytesCompress) {
			coding = httpCodingCompress
		} else if bytes.Equal(data, bytesIdentity) {
			coding = httpCodingIdentity
		} else {
			// Empty or unknown content-coding, ignored
			continue
		}
		r.acceptCodings[r.nAcceptCodings] = coding
		r.nAcceptCodings++
	}
	return true
}
func (r *httpIn_) checkConnection(pairs []pair, from uint8, edge uint8) bool { // Connection = #connection-option
	if r.versionCode >= Version2 {
		r.headResult, r.failReason = StatusBadRequest, "connection header is not allowed in HTTP/2 and HTTP/3"
		return false
	}
	if r.zConnection.isEmpty() {
		r.zConnection.from = from
	}
	r.zConnection.edge = edge
	// connection-option = token
	for i := from; i < edge; i++ {
		data := pairs[i].dataAt(r.input)
		bytesToLower(data) // connection options are case-insensitive.
		if bytes.Equal(data, bytesKeepAlive) {
			r.keepAlive = 1 // to be compatible with HTTP/1.0
		} else if bytes.Equal(data, bytesClose) {
			// Furthermore, the header field-name "Close" has been registered as
			// "reserved", since using that name as an HTTP header field might
			// conflict with the "close" connection option of the Connection header
			// field (Section 6.1).
			r.keepAlive = 0
		}
	}
	return true
}
func (r *httpIn_) checkContentEncoding(pairs []pair, from uint8, edge uint8) bool { // Content-Encoding = #content-coding
	// content-coding = token
	for i := from; i < edge; i++ {
		if r.nContentCodings == int8(cap(r.contentCodings)) {
			r.headResult, r.failReason = StatusBadRequest, "too many content codings applied to content"
			return false
		}
		data := pairs[i].dataAt(r.input)
		bytesToLower(data)
		var coding uint8
		if bytes.Equal(data, bytesGzip) {
			coding = httpCodingGzip
		} else if bytes.Equal(data, bytesBrotli) {
			coding = httpCodingBrotli
		} else if bytes.Equal(data, bytesDeflate) {
			coding = httpCodingDeflate
		} else if bytes.Equal(data, bytesCompress) {
			coding = httpCodingCompress
		} else {
			// RFC 7231 (section 3.1.2.2):
			// An origin server MAY respond with a status code of 415 (Unsupported
			// Media Type) if a representation in the request message has a content
			// coding that is not acceptable.

			// TODO: but we can be proxies too...
			r.headResult, r.failReason = StatusUnsupportedMediaType, "currently only gzip, deflate, compress, and br are supported"
			return false
		}
		r.contentCodings[r.nContentCodings] = coding
		r.nContentCodings++
	}
	return true
}
func (r *httpIn_) checkContentLanguage(pairs []pair, from uint8, edge uint8) bool { // Content-Language = #language-tag
	if r.zContentLanguage.isEmpty() {
		r.zContentLanguage.from = from
	}
	r.zContentLanguage.edge = edge
	return true
}
func (r *httpIn_) checkTrailer(pairs []pair, from uint8, edge uint8) bool { // Trailer = #field-name
	// field-name = token
	if r.zTrailer.isEmpty() {
		r.zTrailer.from = from
	}
	r.zTrailer.edge = edge
	return true
}
func (r *httpIn_) checkTransferEncoding(pairs []pair, from uint8, edge uint8) bool { // Transfer-Encoding = #transfer-coding
	if r.versionCode != Version1_1 {
		r.headResult, r.failReason = StatusBadRequest, "transfer-encoding is only allowed in http/1.1"
		return false
	}
	// transfer-coding = "chunked" / "compress" / "deflate" / "gzip"
	for i := from; i < edge; i++ {
		data := pairs[i].dataAt(r.input)
		bytesToLower(data)
		if bytes.Equal(data, bytesChunked) {
			r.transferChunked = true
		} else {
			// RFC 7230 (section 3.3.1):
			// A server that receives a request message with a transfer coding it
			// does not understand SHOULD respond with 501 (Not Implemented).
			r.headResult, r.failReason = StatusNotImplemented, "unknown transfer coding"
			return false
		}
	}
	return true
}
func (r *httpIn_) checkVia(pairs []pair, from uint8, edge uint8) bool { // Via = #( received-protocol RWS received-by [ RWS comment ] )
	if r.zVia.isEmpty() {
		r.zVia.from = from
	}
	r.zVia.edge = edge
	return true
}

func (r *httpIn_) determineContentMode() bool {
	if r.transferChunked { // must be HTTP/1.1 and there is a transfer-encoding: chunked
		if r.contentSize != -1 { // there is a content-length: nnn
			// RFC 7230 (section 3.3.3):
			// If a message is received with both a Transfer-Encoding and a
			// Content-Length header field, the Transfer-Encoding overrides the
			// Content-Length.  Such a message might indicate an attempt to
			// perform request smuggling (Section 9.5) or response splitting
			// (Section 9.4) and ought to be handled as an error.  A sender MUST
			// remove the received Content-Length field prior to forwarding such
			// a message downstream.
			r.headResult, r.failReason = StatusBadRequest, "transfer-encoding conflits with content-length"
			return false
		}
		r.contentSize = -2 // unsized
	} else if r.versionCode >= Version2 && r.contentSize == -1 { // no content-length header
		// TODO: if there is no content, HTTP/2 and HTTP/3 will mark END_STREAM in headers frame. use this to decide!
		r.contentSize = -2 // if there is no content-length in HTTP/2 or HTTP/3, we treat it as unsized
	}
	return true
}
func (r *httpIn_) markUnsized()    { r.contentSize = -2 }
func (r *httpIn_) isUnsized() bool { return r.contentSize == -2 }

func (r *httpIn_) SetRecvTimeout(timeout time.Duration) { r.recvTimeout = timeout }

func (r *httpIn_) unsafeContent() []byte {
	r.loadContent()
	if r.stream.isBroken() {
		return nil
	}
	return r.contentBlob[0:r.receivedSize]
}
func (r *httpIn_) loadContent() { // into memory. [0, r.maxContentSize]
	if r.contentReceived {
		// Content is in r.contentBlob already.
		return
	}
	r.contentReceived = true
	switch content := r.recvContent(true).(type) { // retain
	case []byte: // (0, 64K1]. case happens when sized content <= 64K1
		r.contentBlob = content // real content is r.contentBlob[:r.receivedSize]
		r.contentBlobKind = httpContentBlobPool
	case TempFile: // [0, r.maxContentSize]. case happens when sized content > 64K1, or content is unsized.
		contentFile := content.(*os.File)
		if r.receivedSize == 0 { // unsized content can has 0 size
			r.contentBlob = r.input
			r.contentBlobKind = httpContentBlobInput
		} else { // r.receivedSize > 0
			if r.receivedSize <= _64K1 { // must be unsized content because sized content is a []byte if <= _64K1
				r.contentBlob = GetNK(r.receivedSize) // 4K/16K/64K1. real content is r.content[:r.receivedSize]
				r.contentBlobKind = httpContentBlobPool
			} else { // > 64K1, content can be sized or unsized. just alloc
				r.contentBlob = make([]byte, r.receivedSize)
				r.contentBlobKind = httpContentBlobMake
			}
			if _, err := io.ReadFull(contentFile, r.contentBlob[:r.receivedSize]); err != nil {
				// TODO: r.app.log
			}
		}
		contentFile.Close()
		if IsDebug(2) {
			Debugln("contentFile is left as is!")
		} else if err := os.Remove(contentFile.Name()); err != nil {
			// TODO: r.app.log
		}
	case error: // i/o error or unexpected EOF
		// TODO: log error?
		r.stream.markBroken()
	}
}
func (r *httpIn_) holdContent() any { // used by proxies
	if r.contentReceived {
		if r.contentHeld == nil {
			return r.contentBlob // immediate
		}
		return r.contentHeld
	}
	r.contentReceived = true
	switch content := r.recvContent(true).(type) { // retain
	case []byte: // (0, 64K1]. case happens when sized content <= 64K1
		r.contentBlob = content
		r.contentBlobKind = httpContentBlobPool // so r.contentBlob can be freed on end
		return r.contentBlob[0:r.receivedSize]
	case TempFile: // [0, r.maxContentSize]. case happens when sized content > 64K1, or content is unsized.
		r.contentHeld = content.(*os.File)
		return r.contentHeld
	case error: // i/o error or unexpected EOF
		// TODO: log err?
	}
	r.stream.markBroken()
	return nil
}
func (r *httpIn_) dropContent() { // if message content is not received, this will be called at last
	switch content := r.recvContent(false).(type) { // don't retain
	case []byte: // (0, 64K1]. case happens when sized content <= 64K1
		PutNK(content)
	case TempFile: // [0, r.maxContentSize]. case happens when sized content > 64K1, or content is unsized.
		if content != FakeFile { // this must not happen!
			BugExitln("temp file is not fake when dropping content")
		}
	case error: // i/o error or unexpected EOF
		// TODO: log error?
		r.stream.markBroken()
	}
}
func (r *httpIn_) recvContent(retain bool) any { // to []byte (for small content <= 64K1) or TempFile (for large content > 64K1, or unsized content)
	if r.contentSize > 0 && r.contentSize <= _64K1 { // (0, 64K1]. save to []byte. must be received in a timeout
		if err := r.stream.setReadDeadline(time.Now().Add(r.stream.keeper().ReadTimeout())); err != nil {
			return err
		}
		// Since content is small, r.bodyWindow and TempFile are not needed.
		contentBlob := GetNK(r.contentSize) // 4K/16K/64K1. max size of content is 64K1
		r.receivedSize = int64(r.imme.size())
		if r.receivedSize > 0 { // r.imme has data
			copy(contentBlob, r.input[r.imme.from:r.imme.edge])
			r.imme.zero()
		}
		if n, err := r.stream.readFull(contentBlob[r.receivedSize:r.contentSize]); err == nil {
			r.receivedSize += int64(n)
			return contentBlob // []byte, fetched from pool
		} else {
			PutNK(contentBlob)
			return err
		}
	}
	// (64K1, r.maxContentSize] when sized, or [0, r.maxContentSize] when unsized. save to TempFile and return the file
	contentFile, err := r._newTempFile(retain)
	if err != nil {
		return err
	}
	var p []byte
	for {
		p, err = r.shell.readContent()
		if len(p) > 0 { // skip 0, nothing to write
			if _, e := contentFile.Write(p); e != nil {
				err = e
				goto badRead
			}
		}
		if err == io.EOF {
			break
		} else if err != nil {
			goto badRead
		}
	}
	if _, err = contentFile.Seek(0, 0); err != nil {
		goto badRead
	}
	return contentFile // the TempFile
badRead:
	contentFile.Close()
	if retain { // the TempFile is not fake, so must remove.
		os.Remove(contentFile.Name())
	}
	return err
}

func (r *httpIn_) AddTrailer(name string, value string) bool { // as extra
	// TODO: add restrictions on what trailers are allowed to add? should we check the value?
	// TODO: parse and check?
	// setFlags?
	return r.addExtra(name, value, 0, kindTrailer)
}
func (r *httpIn_) HasTrailers() bool                   { return r.hasPairs(r.trailers, kindTrailer) }
func (r *httpIn_) AllTrailers() (trailers [][2]string) { return r.allPairs(r.trailers, kindTrailer) }
func (r *httpIn_) T(name string) string {
	value, _ := r.Trailer(name)
	return value
}
func (r *httpIn_) Tstr(name string, defaultValue string) string {
	if value, ok := r.Trailer(name); ok {
		return value
	}
	return defaultValue
}
func (r *httpIn_) Tint(name string, defaultValue int) int {
	if value, ok := r.Trailer(name); ok {
		if i, err := strconv.Atoi(value); err == nil {
			return i
		}
	}
	return defaultValue
}
func (r *httpIn_) Trailer(name string) (value string, ok bool) {
	v, ok := r.getPair(name, 0, r.trailers, kindTrailer)
	return string(v), ok
}
func (r *httpIn_) UnsafeTrailer(name string) (value []byte, ok bool) {
	return r.getPair(name, 0, r.trailers, kindTrailer)
}
func (r *httpIn_) Trailers(name string) (values []string, ok bool) {
	return r.getPairs(name, 0, r.trailers, kindTrailer)
}
func (r *httpIn_) HasTrailer(name string) bool {
	_, ok := r.getPair(name, 0, r.trailers, kindTrailer)
	return ok
}
func (r *httpIn_) DelTrailer(name string) (deleted bool) {
	return r.delPair(name, 0, r.trailers, kindTrailer)
}
func (r *httpIn_) delTrailer(name []byte, hash uint16) {
	r.delPair(risky.WeakString(name), hash, r.trailers, kindTrailer)
}
func (r *httpIn_) delHopTrailers() { // used by proxies
	r._delHopFields(r.trailers, kindTrailer, r.delTrailer)
}
func (r *httpIn_) forTrailers(fn func(trailer *pair, name []byte, value []byte) bool) bool { // by httpOut.copyTrailersFrom(). excluding sub trailers
	return r._forMainFields(r.trailers, kindTrailer, fn)
}

func (r *httpIn_) examineTail() bool {
	for i := r.trailers.from; i < r.trailers.edge; i++ {
		if !r.shell.applyTrailer(&r.primes[i]) {
			// r.bodyResult is set.
			return false
		}
	}
	return true
}

func (r *httpIn_) arrayPush(b byte) {
	r.array[r.arrayEdge] = b
	if r.arrayEdge++; r.arrayEdge == int32(cap(r.array)) {
		r._growArray(1)
	}
}
func (r *httpIn_) _growArray(size int32) bool { // stock->4K->16K->64K1->(128K->...->1G)
	edge := r.arrayEdge + size
	if edge < 0 || edge > _1G { // cannot overflow hard limit: 1G
		return false
	}
	if edge <= int32(cap(r.array)) {
		return true
	}
	arrayKind := r.arrayKind
	var array []byte
	if edge <= _64K1 { // (stock, 64K1]
		r.arrayKind = arrayKindPool
		array = GetNK(int64(edge)) // 4K/16K/64K1
	} else { // > _64K1
		r.arrayKind = arrayKindMake
		if edge <= _128K {
			array = make([]byte, _128K)
		} else if edge <= _256K {
			array = make([]byte, _256K)
		} else if edge <= _512K {
			array = make([]byte, _512K)
		} else if edge <= _1M {
			array = make([]byte, _1M)
		} else if edge <= _2M {
			array = make([]byte, _2M)
		} else if edge <= _4M {
			array = make([]byte, _4M)
		} else if edge <= _8M {
			array = make([]byte, _8M)
		} else if edge <= _16M {
			array = make([]byte, _16M)
		} else if edge <= _32M {
			array = make([]byte, _32M)
		} else if edge <= _64M {
			array = make([]byte, _64M)
		} else if edge <= _128M {
			array = make([]byte, _128M)
		} else if edge <= _256M {
			array = make([]byte, _256M)
		} else if edge <= _512M {
			array = make([]byte, _512M)
		} else { // <= _1G
			array = make([]byte, _1G)
		}
	}
	copy(array, r.array[0:r.arrayEdge])
	if arrayKind == arrayKindPool {
		PutNK(r.array)
	}
	r.array = array
	return true
}

func (r *httpIn_) addHeader(header *pair) bool { // as prime
	if edge, ok := r._addPrime(header); ok {
		r.headers.edge = edge
		return true
	}
	r.headResult, r.failReason = StatusRequestHeaderFieldsTooLarge, "too many headers"
	return false
}
func (r *httpIn_) addTrailer(trailer *pair) bool { // as prime
	if edge, ok := r._addPrime(trailer); ok {
		r.trailers.edge = edge
		return true
	}
	r.bodyResult, r.failReason = StatusRequestHeaderFieldsTooLarge, "too many trailers"
	return false
}

func (r *httpIn_) _addPrime(prime *pair) (edge uint8, ok bool) {
	if len(r.primes) == cap(r.primes) { // full
		if cap(r.primes) != cap(r.stockPrimes) { // too many primes
			return 0, false
		}
		if IsDebug(2) {
			Debugln("use large primes!")
		}
		r.primes = getPairs()
		r.primes = append(r.primes, r.stockPrimes[:]...)
	}
	r.primes = append(r.primes, *prime)
	return uint8(len(r.primes)), true
}
func (r *httpIn_) _delPrime(i uint8) { r.primes[i].zero() }
func (r *httpIn_) addExtra(name string, value string, hash uint16, extraKind int8) bool {
	nameSize := len(name)
	if nameSize == 0 || nameSize > 255 { // name size is limited at 255
		return false
	}
	valueSize := len(value)
	if extraKind == kindForm { // for forms, max value size is 1G
		if valueSize > _1G {
			return false
		}
	} else if valueSize > _16K { // for queries, headers, cookies and trailers, max value size is 16K
		return false
	}
	if !r._growArray(int32(nameSize + valueSize)) { // extras are always placed in r.array
		return false
	}
	extra := &r.mainPair
	extra.zero()
	if hash == 0 {
		extra.hash = stringHash(name)
	} else {
		extra.hash = hash
	}
	extra.kind = extraKind
	extra.place = placeArray
	extra.nameFrom = r.arrayEdge
	extra.nameSize = uint8(nameSize)
	r.arrayEdge += int32(copy(r.array[r.arrayEdge:], name))
	extra.value.from = r.arrayEdge
	r.arrayEdge += int32(copy(r.array[r.arrayEdge:], value))
	extra.value.edge = r.arrayEdge
	return r._addExtra(extra)
}
func (r *httpIn_) _addExtra(extra *pair) bool {
	if len(r.extras) == cap(r.extras) { // full
		if cap(r.extras) != cap(r.stockExtras) { // too many extras
			return false
		}
		if IsDebug(2) {
			Debugln("use large extras!")
		}
		r.extras = getPairs()
		r.extras = append(r.extras, r.stockExtras[:]...)
	}
	r.extras = append(r.extras, *extra)
	r.hasExtras[extra.kind] = true
	return true
}

func (r *httpIn_) hasPairs(primes zone, extraKind int8) bool {
	return primes.notEmpty() || r.hasExtras[extraKind]
}
func (r *httpIn_) allPairs(primes zone, extraKind int8) [][2]string {
	var pairs [][2]string
	if extraKind&(kindHeader|kindTrailer) != 0 { // skip sub fields, only collect values of main fields
		for i := primes.from; i < primes.edge; i++ {
			if prime := &r.primes[i]; prime.hash != 0 {
				p := r._placeOf(prime)
				pairs = append(pairs, [2]string{string(prime.nameAt(p)), string(prime.valueAt(p))})
			}
		}
		if r.hasExtras[extraKind] {
			for i := 0; i < len(r.extras); i++ {
				if extra := &r.extras[i]; extra.hash != 0 && extra.kind == extraKind && !extra.isSubField() {
					pairs = append(pairs, [2]string{string(extra.nameAt(r.array)), string(extra.valueAt(r.array))})
				}
			}
		}
	} else { // queries, cookies, and forms
		for i := primes.from; i < primes.edge; i++ {
			if prime := &r.primes[i]; prime.hash != 0 {
				p := r._placeOf(prime)
				pairs = append(pairs, [2]string{string(prime.nameAt(p)), string(prime.valueAt(p))})
			}
		}
		if r.hasExtras[extraKind] {
			for i := 0; i < len(r.extras); i++ {
				if extra := &r.extras[i]; extra.hash != 0 && extra.kind == extraKind {
					pairs = append(pairs, [2]string{string(extra.nameAt(r.array)), string(extra.valueAt(r.array))})
				}
			}
		}
	}
	return pairs
}
func (r *httpIn_) getPair(name string, hash uint16, primes zone, extraKind int8) (value []byte, ok bool) {
	if name != "" {
		if hash == 0 {
			hash = stringHash(name)
		}
		if extraKind&(kindHeader|kindTrailer) != 0 { // skip comma fields, only collect data of fields without comma
			for i := primes.from; i < primes.edge; i++ {
				if prime := &r.primes[i]; prime.hash == hash {
					if p := r._placeOf(prime); prime.nameEqualString(p, name) {
						if !prime.isParsed() && !r._splitField(prime, defaultFdesc, p) {
							continue
						}
						if !prime.isCommaValue() {
							return prime.dataAt(p), true
						}
					}
				}
			}
			if r.hasExtras[extraKind] {
				for i := 0; i < len(r.extras); i++ {
					if extra := &r.extras[i]; extra.hash == hash && extra.kind == extraKind && !extra.isCommaValue() {
						if p := r._placeOf(extra); extra.nameEqualString(p, name) {
							return extra.dataAt(p), true
						}
					}
				}
			}
		} else { // queries, cookies, and forms
			for i := primes.from; i < primes.edge; i++ {
				if prime := &r.primes[i]; prime.hash == hash {
					if p := r._placeOf(prime); prime.nameEqualString(p, name) {
						return prime.valueAt(p), true
					}
				}
			}
			if r.hasExtras[extraKind] {
				for i := 0; i < len(r.extras); i++ {
					if extra := &r.extras[i]; extra.hash == hash && extra.kind == extraKind && extra.nameEqualString(r.array, name) {
						return extra.valueAt(r.array), true
					}
				}
			}
		}
	}
	return
}
func (r *httpIn_) getPairs(name string, hash uint16, primes zone, extraKind int8) (values []string, ok bool) {
	if name != "" {
		if hash == 0 {
			hash = stringHash(name)
		}
		if extraKind&(kindHeader|kindTrailer) != 0 { // skip comma fields, only collect data of fields without comma
			for i := primes.from; i < primes.edge; i++ {
				if prime := &r.primes[i]; prime.hash == hash {
					if p := r._placeOf(prime); prime.nameEqualString(p, name) {
						if !prime.isParsed() && !r._splitField(prime, defaultFdesc, p) {
							continue
						}
						if !prime.isCommaValue() {
							values = append(values, string(prime.dataAt(p)))
						}
					}
				}
			}
			if r.hasExtras[extraKind] {
				for i := 0; i < len(r.extras); i++ {
					if extra := &r.extras[i]; extra.hash == hash && extra.kind == extraKind && !extra.isCommaValue() {
						if p := r._placeOf(extra); extra.nameEqualString(p, name) {
							values = append(values, string(extra.dataAt(p)))
						}
					}
				}
			}
		} else { // queries, cookies, and forms
			for i := primes.from; i < primes.edge; i++ {
				if prime := &r.primes[i]; prime.hash == hash {
					if p := r._placeOf(prime); prime.nameEqualString(p, name) {
						values = append(values, string(prime.valueAt(p)))
					}
				}
			}
			if r.hasExtras[extraKind] {
				for i := 0; i < len(r.extras); i++ {
					if extra := &r.extras[i]; extra.hash == hash && extra.kind == extraKind && extra.nameEqualString(r.array, name) {
						values = append(values, string(extra.valueAt(r.array)))
					}
				}
			}
		}
		if len(values) > 0 {
			ok = true
		}
	}
	return
}
func (r *httpIn_) delPair(name string, hash uint16, primes zone, extraKind int8) (deleted bool) {
	if name != "" {
		if hash == 0 {
			hash = stringHash(name)
		}
		for i := primes.from; i < primes.edge; i++ {
			if prime := &r.primes[i]; prime.hash == hash {
				if p := r._placeOf(prime); prime.nameEqualString(p, name) {
					prime.zero()
					deleted = true
				}
			}
		}
		if r.hasExtras[extraKind] {
			for i := 0; i < len(r.extras); i++ {
				if extra := &r.extras[i]; extra.hash == hash && extra.kind == extraKind && extra.nameEqualString(r.array, name) {
					extra.zero()
					deleted = true
				}
			}
		}
	}
	return
}
func (r *httpIn_) _placeOf(pair *pair) []byte {
	var place []byte
	if pair.place == placeInput {
		place = r.input
	} else if pair.place == placeArray {
		place = r.array
	} else if pair.place == placeStatic2 {
		place = http2BytesStatic
	} else if pair.place == placeStatic3 {
		place = http3BytesStatic
	} else {
		BugExitln("unknown pair.place")
	}
	return place
}

func (r *httpIn_) _forMainFields(fields zone, extraKind int8, fn func(field *pair, name []byte, value []byte) bool) bool {
	for i := fields.from; i < fields.edge; i++ {
		if field := &r.primes[i]; field.hash != 0 {
			p := r._placeOf(field)
			if !fn(field, field.nameAt(p), field.valueAt(p)) {
				return false
			}
		}
	}
	if r.hasExtras[extraKind] {
		for i := 0; i < len(r.extras); i++ {
			if field := &r.extras[i]; field.hash != 0 && field.kind == extraKind && !field.isSubField() {
				if !fn(field, field.nameAt(r.array), field.valueAt(r.array)) {
					return false
				}
			}
		}
	}
	return true
}
func (r *httpIn_) _delHopFields(fields zone, extraKind int8, delField func(name []byte, hash uint16)) { // TODO: improve performance
	// These fields should be removed anyway: proxy-connection, keep-alive, te, transfer-encoding, upgrade
	delField(bytesProxyConnection, hashProxyConnection)
	delField(bytesKeepAlive, hashKeepAlive)
	if !r.asResponse { // as request
		delField(bytesTE, hashTE)
	}
	delField(bytesTransferEncoding, hashTransferEncoding)
	delField(bytesUpgrade, hashUpgrade)

	for i := r.zConnection.from; i < r.zConnection.edge; i++ {
		prime := &r.primes[i]
		// Skip fields that are not "connection: xxx"
		if prime.hash != hashConnection || !prime.nameEqualBytes(r.input, bytesConnection) {
			continue
		}
		p := r._placeOf(prime)
		optionName := prime.dataAt(p)
		optionHash := bytesHash(optionName)
		// Skip options that are "connection: connection"
		if optionHash == hashConnection && bytes.Equal(optionName, bytesConnection) {
			continue
		}
		// Now remove options in primes and extras. Note: we don't remove ("connection: xxx") itself, since we simply ignore it when acting as a proxy.
		for j := fields.from; j < fields.edge; j++ {
			if field := &r.primes[j]; field.hash == optionHash && field.nameEqualBytes(p, optionName) {
				field.zero()
			}
		}
		if !r.hasExtras[extraKind] {
			continue
		}
		for i := 0; i < len(r.extras); i++ {
			if extra := &r.extras[i]; extra.hash == optionHash && extra.kind == extraKind {
				if p := r._placeOf(extra); extra.nameEqualBytes(p, optionName) {
					extra.zero()
				}
			}
		}
	}
}

func (r *httpIn_) addPara(para *para) (edge uint8, ok bool) {
	if len(r.paras) == cap(r.paras) { // full
		if cap(r.paras) != cap(r.stockParas) { // too many paras
			return 0, false
		}
		if IsDebug(2) {
			Debugln("use large paras!")
		}
		r.paras = getParas()
		r.paras = append(r.paras, r.stockParas[:]...)
	}
	r.paras = append(r.paras, *para)
	return uint8(len(r.paras)), true
}

func (r *httpIn_) _newTempFile(retain bool) (TempFile, error) { // to save content to
	if !retain { // since data is not used by upper caller, we don't need to actually write data to file.
		return FakeFile, nil
	}
	filesDir := r.shell.saveContentFilesDir()
	pathSize := len(filesDir)
	filePath := r.UnsafeMake(pathSize + 19) // 19 bytes is enough for int64
	copy(filePath, filesDir)
	from, edge := r.stream.makeTempName(filePath[pathSize:], r.recvTime.Unix())
	pathSize += copy(filePath[pathSize:], filePath[pathSize+from:pathSize+edge])
	return os.OpenFile(risky.WeakString(filePath[:pathSize]), os.O_RDWR|os.O_CREATE, 0644)
}
func (r *httpIn_) _beforeRead(toTime *time.Time) error {
	now := time.Now()
	if toTime.IsZero() {
		*toTime = now
	}
	return r.stream.setReadDeadline(now.Add(r.stream.keeper().ReadTimeout()))
}
func (r *httpIn_) _tooSlow() bool {
	return r.recvTimeout > 0 && time.Now().Sub(r.bodyTime) >= r.recvTimeout
}

const ( // HTTP incoming content blob kinds
	httpContentBlobNone  = iota // must be 0
	httpContentBlobInput        // refers to r.input
	httpContentBlobPool         // fetched from pool
	httpContentBlobMake         // direct make
)

var ( // http incoming message errors
	httpInBadChunk = errors.New("bad chunk")
	httpInTooSlow  = errors.New("http incoming too slow")
)

// httpOut is a *http[1-3]Response or *H[1-3]Request, used as shell by httpOut_.
type httpOut interface {
	control() []byte
	header(name []byte) (value []byte, ok bool)
	hasHeader(name []byte) bool
	delHeader(name []byte) (deleted bool)
	delHeaderAt(o uint8)
	addHeader(name []byte, value []byte) bool
	insertHeader(hash uint16, name []byte, value []byte) bool
	removeHeader(hash uint16, name []byte) (deleted bool)
	addedHeaders() []byte
	fixedHeaders() []byte
	finalizeHeaders()
	send() error
	sendChain(chain Chain) error
	beforePush() error
	pushHeaders() error
	push(chunk *Block) error
	pushChain(chain Chain) error
	trailer(name []byte) (value []byte, ok bool)
	addTrailer(name []byte, value []byte) bool
	finalizeUnsized() error
	syncHeaders() error       // used by proxies
	syncBytes(p []byte) error // used by proxies
}

// httpOut_ is a mixin for httpResponse_ and hRequest_.
type httpOut_ struct { // outgoing. needs building
	// Assocs
	shell  httpOut // *http[1-3]Response or *H[1-3]Request
	stream stream  // *http[1-3]Stream or *H[1-3]Stream
	// Stream states (buffers)
	stockFields [1536]byte // for r.fields
	stockBlock  Block      // for r.content. if content has only one block, this one is used
	// Stream states (controlled)
	edges [204]uint16 // edges of headers or trailers in r.fields. controlled by r.nHeaders or r.nTrailers. edges[0] is not used!
	// Stream states (non-zeros)
	fields      []byte        // bytes of the headers or trailers which are not present at the same time. [<r.stockFields>/4K/16K]
	content     Chain         // message content, refers to r.stockBlock or a linked list. freed after stream ends
	sendTimeout time.Duration // timeout to send the whole message
	contentSize int64         // info of outgoing content. -1: not set, -2: unsized, >=0: size
	versionCode uint8         // Version1_1, Version2, Version3
	asRequest   bool          // use message as request?
	nHeaders    uint8         // 1+num of added headers, starts from 1 because edges[0] is not used
	nTrailers   uint8         // 1+num of added trailers, starts from 1 because edges[0] is not used
	// Stream states (zeros)
	sendTime    time.Time   // the time when first send operation is performed
	vector      net.Buffers // for writev. to overcome the limitation of Go's escape analysis. set when used, reset after stream
	fixedVector [4][]byte   // for sending/pushing message. reset after stream
	httpOut0                // all values must be zero by default in this struct!
}
type httpOut0 struct { // for fast reset, entirely
	controlEdge   uint16 // edge of control in r.fields. only used by request to mark the method and request-target
	fieldsEdge    uint16 // edge of r.fields. max size of r.fields must be <= 16K. used by both headers and trailers because they are not present at the same time
	hasRevisers   bool   // are there any revisers hooked on this outgoing message?
	isSent        bool   // whether the message is sent
	forbidContent bool   // forbid content?
	forbidFraming bool   // forbid content-length and transfer-encoding?
	oContentType  uint8  // position of content-type in r.edges
	oDate         uint8  // position of date in r.edges
}

func (r *httpOut_) onUse(versionCode uint8, asRequest bool) { // for non-zeros
	r.fields = r.stockFields[:]
	r.content.PushTail(&r.stockBlock) // r.content has one block by default (but may not be used or sent actually)
	r.sendTimeout = r.stream.keeper().SendTimeout()
	r.contentSize = -1 // not set
	r.versionCode = versionCode
	r.asRequest = asRequest
	r.nHeaders, r.nTrailers = 1, 1 // r.edges[0] is not used
}
func (r *httpOut_) onEnd() { // for zeros
	if cap(r.fields) != cap(r.stockFields) {
		PutNK(r.fields)
		r.fields = nil
	}
	r.content.free() // also resets r.stockBlock

	r.sendTime = time.Time{}
	r.vector = nil
	r.fixedVector = [4][]byte{}
	r.httpOut0 = httpOut0{}
}

func (r *httpOut_) unsafeMake(size int) []byte { return r.stream.unsafeMake(size) }

func (r *httpOut_) AddContentType(contentType string) bool {
	return r.AddHeaderBytes(bytesContentType, risky.ConstBytes(contentType))
}

func (r *httpOut_) Header(name string) (value string, ok bool) {
	v, ok := r.shell.header(risky.ConstBytes(name))
	return string(v), ok
}
func (r *httpOut_) HasHeader(name string) bool {
	return r.shell.hasHeader(risky.ConstBytes(name))
}
func (r *httpOut_) AddHeader(name string, value string) bool {
	return r.AddHeaderBytes(risky.ConstBytes(name), risky.ConstBytes(value))
}
func (r *httpOut_) AddHeaderBytes(name []byte, value []byte) bool {
	hash, valid, lower := r._nameCheck(name)
	if !valid {
		return false
	}
	for _, b := range value { // to prevent response splitting
		if b == '\r' || b == '\n' {
			return false
		}
	}
	return r.shell.insertHeader(hash, lower, value)
}
func (r *httpOut_) DelHeader(name string) bool {
	return r.DelHeaderBytes(risky.ConstBytes(name))
}
func (r *httpOut_) DelHeaderBytes(name []byte) bool {
	hash, valid, lower := r._nameCheck(name)
	if !valid {
		return false
	}
	return r.shell.removeHeader(hash, lower)
}
func (r *httpOut_) _nameCheck(name []byte) (hash uint16, valid bool, lower []byte) { // TODO: improve performance
	n := len(name)
	if n == 0 || n > 255 {
		return 0, false, nil
	}
	allLower := true
	for i := 0; i < n; i++ {
		if b := name[i]; b >= 'a' && b <= 'z' || b == '-' {
			hash += uint16(b)
		} else {
			hash = 0
			allLower = false
			break
		}
	}
	if allLower {
		return hash, true, name
	}
	buffer := r.stream.smallBuffer()
	for i := 0; i < n; i++ {
		b := name[i]
		if b >= 'A' && b <= 'Z' {
			b += 0x20 // to lower
		} else if !(b >= 'a' && b <= 'z' || b == '-') {
			return 0, false, nil
		}
		hash += uint16(b)
		buffer[i] = b
	}
	return hash, true, buffer[:n]
}

func (r *httpOut_) markUnsized()    { r.contentSize = -2 }
func (r *httpOut_) isUnsized() bool { return r.contentSize == -2 }
func (r *httpOut_) markSent()       { r.isSent = true }
func (r *httpOut_) IsSent() bool    { return r.isSent }

func (r *httpOut_) SetSendTimeout(timeout time.Duration) { r.sendTimeout = timeout }

func (r *httpOut_) Send(content string) error      { return r.SendBytes(risky.ConstBytes(content)) }
func (r *httpOut_) SendBytes(content []byte) error { return r.sendBlob(content) }
func (r *httpOut_) SendJSON(content any) error {
	// TODO: optimize & set content-type?
	data, err := json.Marshal(content)
	if err != nil {
		return err
	}
	return r.SendBytes(data)
}
func (r *httpOut_) SendFile(contentPath string) error {
	file, err := os.Open(contentPath)
	if err != nil {
		return err
	}
	info, err := file.Stat()
	if err != nil {
		file.Close()
		return err
	}
	return r.sendFile(file, info, true)
}

func (r *httpOut_) Push(chunk string) error      { return r.PushBytes(risky.ConstBytes(chunk)) }
func (r *httpOut_) PushBytes(chunk []byte) error { return r.pushBlob(chunk) }
func (r *httpOut_) PushFile(chunkPath string) error {
	file, err := os.Open(chunkPath)
	if err != nil {
		return err
	}
	info, err := file.Stat()
	if err != nil {
		file.Close()
		return err
	}
	return r.pushFile(file, info, true)
}

func (r *httpOut_) Trailer(name string) (value string, ok bool) {
	v, ok := r.shell.trailer(risky.ConstBytes(name))
	return string(v), ok
}
func (r *httpOut_) AddTrailer(name string, value string) bool {
	return r.AddTrailerBytes(risky.ConstBytes(name), risky.ConstBytes(value))
}
func (r *httpOut_) AddTrailerBytes(name []byte, value []byte) bool {
	if r.isSent { // trailers must be added after headers & content are sent, otherwise r.fields will be messed up
		return r.shell.addTrailer(name, value)
	}
	return false
}

func (r *httpOut_) appendContentType(contentType []byte) (ok bool) {
	return r._appendSingleton(&r.oContentType, bytesContentType, contentType)
}
func (r *httpOut_) appendDate(date []byte) (ok bool) {
	return r._appendSingleton(&r.oDate, bytesDate, date)
}

func (r *httpOut_) deleteContentType() (deleted bool) { return r._deleteSingleton(&r.oContentType) }
func (r *httpOut_) deleteDate() (deleted bool)        { return r._deleteSingleton(&r.oDate) }

func (r *httpOut_) _appendSingleton(pIndex *uint8, name []byte, value []byte) bool {
	if *pIndex > 0 || !r.shell.addHeader(name, value) {
		return false
	}
	*pIndex = r.nHeaders - 1 // r.nHeaders begins from 1, so must minus one
	return true
}
func (r *httpOut_) _deleteSingleton(pIndex *uint8) bool {
	if *pIndex == 0 { // not exist
		return false
	}
	r.shell.delHeaderAt(*pIndex)
	*pIndex = 0
	return true
}

func (r *httpOut_) _setUnixTime(pUnixTime *int64, pIndex *uint8, unixTime int64) bool {
	if unixTime < 0 {
		return false
	}
	if *pUnixTime == -2 { // set through general api
		r.shell.delHeaderAt(*pIndex)
		*pIndex = 0
	}
	*pUnixTime = unixTime
	return true
}
func (r *httpOut_) _addUnixTime(pUnixTime *int64, pIndex *uint8, name []byte, httpDate []byte) bool {
	if *pUnixTime == -2 {
		r.shell.delHeaderAt(*pIndex)
		*pIndex = 0
	} else { // >= 0 or -1
		*pUnixTime = -2
	}
	if !r.shell.addHeader(name, httpDate) {
		return false
	}
	*pIndex = r.nHeaders - 1 // r.nHeaders begins from 1, so must minus one
	return true
}
func (r *httpOut_) _delUnixTime(pUnixTime *int64, pIndex *uint8) bool {
	if *pUnixTime == -1 {
		return false
	}
	if *pUnixTime == -2 {
		r.shell.delHeaderAt(*pIndex)
		*pIndex = 0
	}
	*pUnixTime = -1
	return true
}

func (r *httpOut_) pass(in httpIn) error { // used by proxes, to sync content directly
	pass := r.shell.syncBytes
	if in.isUnsized() || r.hasRevisers { // if we need to revise, we always use unsized output no matter the original content is sized or unsized
		pass = r.PushBytes
	} else { // in is sized and there are no revisers, use syncBytes
		r.isSent = true
		r.contentSize = in.ContentSize()
		// TODO: find a way to reduce i/o syscalls if content is small?
		if err := r.shell.syncHeaders(); err != nil {
			return err
		}
	}
	for {
		p, err := in.readContent()
		if len(p) >= 0 {
			if e := pass(p); e != nil {
				return e
			}
		}
		if err != nil {
			if err == io.EOF {
				break
			}
			return err
		}
	}
	if in.HasTrailers() { // added trailers will be written eventually by upper code.
		if !in.forTrailers(func(trailer *pair, name []byte, value []byte) bool {
			return r.shell.addTrailer(name, value)
		}) {
			return httpOutTrailerFailed
		}
	}
	return nil
}
func (r *httpOut_) post(content any, hasTrailers bool) error { // used by proxies, to post held content
	if contentBlob, ok := content.([]byte); ok {
		if hasTrailers { // if (in the future) we supports holding unsized content in buffer, this happens
			return r.pushBlob(contentBlob)
		} else {
			return r.sendBlob(contentBlob)
		}
	} else if contentFile, ok := content.(*os.File); ok {
		fileInfo, err := contentFile.Stat()
		if err != nil {
			contentFile.Close()
			return err
		}
		if hasTrailers { // we must use unsized
			return r.pushFile(contentFile, fileInfo, false) // false to avoid twice close()
		} else {
			return r.sendFile(contentFile, fileInfo, false) // false to avoid twice close()
		}
	} else { // nil means no content.
		if err := r.beforeSend(); err != nil {
			return err
		}
		r.forbidContent = true
		return r.shell.send()
	}
}

func (r *httpOut_) beforeSend() error {
	if r.isSent {
		return httpOutAlreadySent
	}
	r.isSent = true
	return nil
}
func (r *httpOut_) sendBlob(content []byte) error {
	if err := r.beforeSend(); err != nil {
		return err
	}
	r.content.head.SetBlob(content)
	r.contentSize = int64(len(content)) // original size, may be revised
	return r.shell.send()
}
func (r *httpOut_) sendFile(content *os.File, info os.FileInfo, shut bool) error {
	if err := r.beforeSend(); err != nil {
		return err
	}
	r.content.head.SetFile(content, info, shut)
	r.contentSize = info.Size() // original size, may be revised
	return r.shell.send()
}
func (r *httpOut_) pushBlob(chunk []byte) error {
	if err := r.shell.beforePush(); err != nil {
		return err
	}
	if len(chunk) == 0 { // empty chunk is not actually sent, since it is used to indicate end of chunks
		return nil
	}
	block := GetBlock()
	block.SetBlob(chunk)
	return r.shell.push(block)
}
func (r *httpOut_) pushFile(chunk *os.File, info os.FileInfo, shut bool) error {
	if err := r.shell.beforePush(); err != nil {
		return err
	}
	if info.Size() == 0 { // empty chunk is not actually sent, since it is used to indicate end of chunks
		if shut {
			chunk.Close()
		}
		return nil
	}
	block := GetBlock()
	block.SetFile(chunk, info, shut)
	return r.shell.push(block)
}

func (r *httpOut_) growHeader(size int) (from int, edge int, ok bool) { // headers and trailers are not present at the same time
	if r.nHeaders == uint8(cap(r.edges)) { // too many headers
		return
	}
	return r._growFields(size)
}
func (r *httpOut_) growTrailer(size int) (from int, edge int, ok bool) { // headers and trailers are not present at the same time
	if r.nTrailers == uint8(cap(r.edges)) { // too many trailers
		return
	}
	return r._growFields(size)
}
func (r *httpOut_) _growFields(size int) (from int, edge int, ok bool) { // used by both growHeader and growTrailer as they are not used at the same time
	if size <= 0 || size > _16K { // size allowed: (0, 16K]
		BugExitln("invalid size in _growFields")
	}
	from = int(r.fieldsEdge)
	ceil := r.fieldsEdge + uint16(size)
	last := ceil + 256 // we reserve 256 bytes at the end of r.fields for finalizeHeaders()
	if ceil < r.fieldsEdge || last > _16K || last < ceil {
		// Overflow
		return
	}
	if last > uint16(cap(r.fields)) { // last <= _16K
		fields := GetNK(int64(last)) // 4K/16K
		copy(fields, r.fields[0:r.fieldsEdge])
		if cap(r.fields) != cap(r.stockFields) {
			PutNK(r.fields)
		}
		r.fields = fields
	}
	r.fieldsEdge = ceil
	edge, ok = int(r.fieldsEdge), true
	return
}

func (r *httpOut_) _beforeWrite() error {
	now := time.Now()
	if r.sendTime.IsZero() {
		r.sendTime = now
	}
	return r.stream.setWriteDeadline(now.Add(r.stream.keeper().WriteTimeout()))
}
func (r *httpOut_) _tooSlow() bool {
	return r.sendTimeout > 0 && time.Now().Sub(r.sendTime) >= r.sendTimeout
}

var ( // http outgoing message errors
	httpOutTooSlow       = errors.New("http outgoing too slow")
	httpOutWriteBroken   = errors.New("write broken")
	httpOutUnknownStatus = errors.New("unknown status")
	httpOutAlreadySent   = errors.New("already sent")
	httpOutTooLarge      = errors.New("content too large")
	httpOutMixedContent  = errors.New("mixed content mode")
	httpOutTrailerFailed = errors.New("add trailer failed")
)

var httpTemplate = [11]byte{':', 's', 't', 'a', 't', 'u', 's', ' ', 'x', 'x', 'x'}
var httpControls = [...][]byte{ // size: 512*24B=12K. for both HTTP/2 and HTTP/3
	// 1XX
	StatusContinue:           []byte(":status 100"),
	StatusSwitchingProtocols: []byte(":status 101"),
	StatusProcessing:         []byte(":status 102"),
	StatusEarlyHints:         []byte(":status 103"),
	// 2XX
	StatusOK:                         []byte(":status 200"),
	StatusCreated:                    []byte(":status 201"),
	StatusAccepted:                   []byte(":status 202"),
	StatusNonAuthoritativeInfomation: []byte(":status 203"),
	StatusNoContent:                  []byte(":status 204"),
	StatusResetContent:               []byte(":status 205"),
	StatusPartialContent:             []byte(":status 206"),
	StatusMultiStatus:                []byte(":status 207"),
	StatusAlreadyReported:            []byte(":status 208"),
	StatusIMUsed:                     []byte(":status 226"),
	// 3XX
	StatusMultipleChoices:   []byte(":status 300"),
	StatusMovedPermanently:  []byte(":status 301"),
	StatusFound:             []byte(":status 302"),
	StatusSeeOther:          []byte(":status 303"),
	StatusNotModified:       []byte(":status 304"),
	StatusUseProxy:          []byte(":status 305"),
	StatusTemporaryRedirect: []byte(":status 307"),
	StatusPermanentRedirect: []byte(":status 308"),
	// 4XX
	StatusBadRequest:                  []byte(":status 400"),
	StatusUnauthorized:                []byte(":status 401"),
	StatusPaymentRequired:             []byte(":status 402"),
	StatusForbidden:                   []byte(":status 403"),
	StatusNotFound:                    []byte(":status 404"),
	StatusMethodNotAllowed:            []byte(":status 405"),
	StatusNotAcceptable:               []byte(":status 406"),
	StatusProxyAuthenticationRequired: []byte(":status 407"),
	StatusRequestTimeout:              []byte(":status 408"),
	StatusConflict:                    []byte(":status 409"),
	StatusGone:                        []byte(":status 410"),
	StatusLengthRequired:              []byte(":status 411"),
	StatusPreconditionFailed:          []byte(":status 412"),
	StatusContentTooLarge:             []byte(":status 413"),
	StatusURITooLong:                  []byte(":status 414"),
	StatusUnsupportedMediaType:        []byte(":status 415"),
	StatusRangeNotSatisfiable:         []byte(":status 416"),
	StatusExpectationFailed:           []byte(":status 417"),
	StatusMisdirectedRequest:          []byte(":status 421"),
	StatusUnprocessableEntity:         []byte(":status 422"),
	StatusLocked:                      []byte(":status 423"),
	StatusFailedDependency:            []byte(":status 424"),
	StatusTooEarly:                    []byte(":status 425"),
	StatusUpgradeRequired:             []byte(":status 426"),
	StatusPreconditionRequired:        []byte(":status 428"),
	StatusTooManyRequests:             []byte(":status 429"),
	StatusRequestHeaderFieldsTooLarge: []byte(":status 431"),
	StatusUnavailableForLegalReasons:  []byte(":status 451"),
	// 5XX
	StatusInternalServerError:           []byte(":status 500"),
	StatusNotImplemented:                []byte(":status 501"),
	StatusBadGateway:                    []byte(":status 502"),
	StatusServiceUnavailable:            []byte(":status 503"),
	StatusGatewayTimeout:                []byte(":status 504"),
	StatusHTTPVersionNotSupported:       []byte(":status 505"),
	StatusVariantAlsoNegotiates:         []byte(":status 506"),
	StatusInsufficientStorage:           []byte(":status 507"),
	StatusLoopDetected:                  []byte(":status 508"),
	StatusNotExtended:                   []byte(":status 510"),
	StatusNetworkAuthenticationRequired: []byte(":status 511"),
}

var httpErrorPages = func() map[int16][]byte {
	const template = `<!doctype html>
<html lang="en">
<head>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<meta charset="utf-8">
<title>%d %s</title>
<style type="text/css">
body{text-align:center;}
header{font-size:72pt;}
main{font-size:36pt;}
footer{padding:20px;}
</style>
</head>
<body>
	<header>%d</header>
	<main>%s</main>
	<footer>Powered by Gorox</footer>
</body>
</html>`
	pages := make(map[int16][]byte)
	for status, control := range http1Controls {
		if status < 400 || control == nil {
			continue
		}
		phrase := control[len("HTTP/1.1 XXX ") : len(control)-2]
		pages[int16(status)] = []byte(fmt.Sprintf(template, status, phrase, status, phrase))
	}
	return pages
}()

// General HTTP protocol elements.

const ( // version codes. keep sync with ../hemi.go
	Version1_0 = 0 // must be 0
	Version1_1 = 1
	Version2   = 2
	Version3   = 3
)

var ( // version strings and byteses
	stringHTTP1_0      = "HTTP/1.0"
	stringHTTP1_1      = "HTTP/1.1"
	stringHTTP2        = "HTTP/2"
	stringHTTP3        = "HTTP/3"
	bytesHTTP1_0       = []byte(stringHTTP1_0)
	bytesHTTP1_1       = []byte(stringHTTP1_1)
	bytesHTTP2         = []byte(stringHTTP2)
	bytesHTTP3         = []byte(stringHTTP3)
	httpVersionStrings = [...]string{
		Version1_0: stringHTTP1_0,
		Version1_1: stringHTTP1_1,
		Version2:   stringHTTP2,
		Version3:   stringHTTP3,
	}
	httpVersionByteses = [...][]byte{
		Version1_0: bytesHTTP1_0,
		Version1_1: bytesHTTP1_1,
		Version2:   bytesHTTP2,
		Version3:   bytesHTTP3,
	}
)

const ( // scheme codes. keep sync with ../hemi.go
	SchemeHTTP  = 0 // must be 0
	SchemeHTTPS = 1
)

var ( // scheme strings and byteses
	stringHTTP        = "http"
	stringHTTPS       = "https"
	bytesHTTP         = []byte(stringHTTP)
	bytesHTTPS        = []byte(stringHTTPS)
	httpSchemeStrings = [...]string{
		SchemeHTTP:  stringHTTP,
		SchemeHTTPS: stringHTTPS,
	}
	httpSchemeByteses = [...][]byte{
		SchemeHTTP:  bytesHTTP,
		SchemeHTTPS: bytesHTTPS,
	}
)

const ( // method codes. keep sync with ../hemi.go
	MethodGET     = 0x00000001
	MethodHEAD    = 0x00000002
	MethodPOST    = 0x00000004
	MethodPUT     = 0x00000008
	MethodDELETE  = 0x00000010
	MethodCONNECT = 0x00000020
	MethodOPTIONS = 0x00000040
	MethodTRACE   = 0x00000080
)

var ( // method hash table
	httpMethodBytes = []byte("GET HEAD POST PUT DELETE CONNECT OPTIONS TRACE")
	httpMethodTable = [8]struct {
		hash uint16
		from uint8
		edge uint8
		code uint32
	}{
		0: {326, 9, 13, MethodPOST},
		1: {274, 4, 8, MethodHEAD},
		2: {249, 14, 17, MethodPUT},
		3: {224, 0, 3, MethodGET},
		4: {556, 33, 40, MethodOPTIONS},
		5: {522, 25, 32, MethodCONNECT},
		6: {435, 18, 24, MethodDELETE},
		7: {367, 41, 46, MethodTRACE},
	}
	httpMethodFind = func(hash uint16) int { return (2610 / int(hash)) % 8 }
)

const ( // status codes. keep sync with ../hemi.go
	// 1XX
	StatusContinue           = 100
	StatusSwitchingProtocols = 101
	StatusProcessing         = 102
	StatusEarlyHints         = 103
	// 2XX
	StatusOK                         = 200
	StatusCreated                    = 201
	StatusAccepted                   = 202
	StatusNonAuthoritativeInfomation = 203
	StatusNoContent                  = 204
	StatusResetContent               = 205
	StatusPartialContent             = 206
	StatusMultiStatus                = 207
	StatusAlreadyReported            = 208
	StatusIMUsed                     = 226
	// 3XX
	StatusMultipleChoices   = 300
	StatusMovedPermanently  = 301
	StatusFound             = 302
	StatusSeeOther          = 303
	StatusNotModified       = 304
	StatusUseProxy          = 305
	StatusTemporaryRedirect = 307
	StatusPermanentRedirect = 308
	// 4XX
	StatusBadRequest                  = 400
	StatusUnauthorized                = 401
	StatusPaymentRequired             = 402
	StatusForbidden                   = 403
	StatusNotFound                    = 404
	StatusMethodNotAllowed            = 405
	StatusNotAcceptable               = 406
	StatusProxyAuthenticationRequired = 407
	StatusRequestTimeout              = 408
	StatusConflict                    = 409
	StatusGone                        = 410
	StatusLengthRequired              = 411
	StatusPreconditionFailed          = 412
	StatusContentTooLarge             = 413
	StatusURITooLong                  = 414
	StatusUnsupportedMediaType        = 415
	StatusRangeNotSatisfiable         = 416
	StatusExpectationFailed           = 417
	StatusMisdirectedRequest          = 421
	StatusUnprocessableEntity         = 422
	StatusLocked                      = 423
	StatusFailedDependency            = 424
	StatusTooEarly                    = 425
	StatusUpgradeRequired             = 426
	StatusPreconditionRequired        = 428
	StatusTooManyRequests             = 429
	StatusRequestHeaderFieldsTooLarge = 431
	StatusUnavailableForLegalReasons  = 451
	// 5XX
	StatusInternalServerError           = 500
	StatusNotImplemented                = 501
	StatusBadGateway                    = 502
	StatusServiceUnavailable            = 503
	StatusGatewayTimeout                = 504
	StatusHTTPVersionNotSupported       = 505
	StatusVariantAlsoNegotiates         = 506
	StatusInsufficientStorage           = 507
	StatusLoopDetected                  = 508
	StatusNotExtended                   = 510
	StatusNetworkAuthenticationRequired = 511
)

const ( // misc http types
	httpModeNormal = 0 // request & response, must be 0
	httpModeTCPTun = 1 // CONNECT method
	httpModeUDPTun = 2 // upgrade: connect-udp
	httpModeSocket = 3 // upgrade: websocket

	httpTargetOrigin    = 0 // must be 0
	httpTargetAbsolute  = 1 // scheme "://" host [ ":" port ] path-abempty [ "?" query ]
	httpTargetAuthority = 2 // hostname:port
	httpTargetAsterisk  = 3 // *

	httpSectionControl  = 0 // must be 0
	httpSectionHeaders  = 1
	httpSectionContent  = 2
	httpSectionTrailers = 3

	httpCodingIdentity = 0 // must be 0
	httpCodingCompress = 1
	httpCodingDeflate  = 2
	httpCodingGzip     = 3
	httpCodingBrotli   = 4

	httpFormNotForm    = 0 // must be 0
	httpFormURLEncoded = 1 // application/x-www-form-urlencoded
	httpFormMultipart  = 2 // multipart/form-data
)

const ( // hashes of http fields. value is calculated by adding all ASCII values.
	// Pseudo headers
	hashAuthority = 1059 // :authority
	hashMethod    = 699  // :method
	hashPath      = 487  // :path
	hashProtocol  = 940  // :protocol
	hashScheme    = 687  // :scheme
	hashStatus    = 734  // :status
	// General fields
	hashAcceptEncoding     = 1508
	hashCacheControl       = 1314 // same with hashLastModified
	hashConnection         = 1072
	hashContentDisposition = 2013
	hashContentEncoding    = 1647
	hashContentLanguage    = 1644
	hashContentLength      = 1450
	hashContentLocation    = 1665
	hashContentRange       = 1333
	hashContentType        = 1258
	hashDate               = 414
	hashKeepAlive          = 995
	hashTrailer            = 755
	hashTransferEncoding   = 1753
	hashUpgrade            = 744
	hashVia                = 320
	// Request fields
	hashAccept             = 624
	hashAcceptCharset      = 1415
	hashAcceptLanguage     = 1505
	hashAuthorization      = 1425
	hashCookie             = 634
	hashExpect             = 649
	hashForwarded          = 958
	hashHost               = 446
	hashIfMatch            = 777
	hashIfModifiedSince    = 1660
	hashIfNoneMatch        = 1254
	hashIfRange            = 777
	hashIfUnmodifiedSince  = 1887
	hashProxyAuthorization = 2048
	hashProxyConnection    = 1695
	hashRange              = 525
	hashTE                 = 217
	hashUserAgent          = 1019
	hashXForwardedFor      = 1495
	// Response fields
	hashAcceptRanges      = 1309
	hashAge               = 301
	hashAllow             = 543
	hashAltSvc            = 698
	hashCacheStatus       = 1221
	hashCDNCacheControl   = 1668
	hashETag              = 417
	hashExpires           = 768
	hashLastModified      = 1314 // same with hashCacheControl
	hashLocation          = 857
	hashProxyAuthenticate = 1902
	hashRetryAfter        = 1141
	hashServer            = 663
	hashSetCookie         = 1011
	hashVary              = 450
	hashWWWAuthenticate   = 1681
)

var ( // byteses of http fields.
	// Pseudo headers
	bytesAuthority = []byte(":authority")
	bytesMethod    = []byte(":method")
	bytesPath      = []byte(":path")
	bytesProtocol  = []byte(":protocol")
	bytesScheme    = []byte(":scheme")
	bytesStatus    = []byte(":status")
	// General fields
	bytesAcceptEncoding     = []byte("accept-encoding")
	bytesCacheControl       = []byte("cache-control")
	bytesConnection         = []byte("connection")
	bytesContentDisposition = []byte("content-disposition")
	bytesContentEncoding    = []byte("content-encoding")
	bytesContentLanguage    = []byte("content-language")
	bytesContentLength      = []byte("content-length")
	bytesContentLocation    = []byte("content-location")
	bytesContentRange       = []byte("content-range")
	bytesContentType        = []byte("content-type")
	bytesDate               = []byte("date")
	bytesKeepAlive          = []byte("keep-alive")
	bytesTrailer            = []byte("trailer")
	bytesTransferEncoding   = []byte("transfer-encoding")
	bytesUpgrade            = []byte("upgrade")
	bytesVia                = []byte("via")
	// Request fields
	bytesAccept             = []byte("accept")
	bytesAcceptCharset      = []byte("accept-charset")
	bytesAcceptLanguage     = []byte("accept-language")
	bytesAuthorization      = []byte("authorization")
	bytesCookie             = []byte("cookie")
	bytesExpect             = []byte("expect")
	bytesForwarded          = []byte("forwarded")
	bytesHost               = []byte("host")
	bytesIfMatch            = []byte("if-match")
	bytesIfModifiedSince    = []byte("if-modified-since")
	bytesIfNoneMatch        = []byte("if-none-match")
	bytesIfRange            = []byte("if-range")
	bytesIfUnmodifiedSince  = []byte("if-unmodified-since")
	bytesProxyAuthorization = []byte("proxy-authorization")
	bytesProxyConnection    = []byte("proxy-connection")
	bytesRange              = []byte("range")
	bytesTE                 = []byte("te")
	bytesUserAgent          = []byte("user-agent")
	bytesXForwardedFor      = []byte("x-forwarded-for")
	// Response fields
	bytesAcceptRanges      = []byte("accept-ranges")
	bytesAge               = []byte("age")
	bytesAllow             = []byte("allow")
	bytesAltSvc            = []byte("alt-svc")
	bytesCacheStatus       = []byte("cache-status")
	bytesCDNCacheControl   = []byte("cdn-cache-control")
	bytesETag              = []byte("etag")
	bytesExpires           = []byte("expires")
	bytesLastModified      = []byte("last-modified")
	bytesLocation          = []byte("location")
	bytesProxyAuthenticate = []byte("proxy-authenticate")
	bytesRetryAfter        = []byte("retry-after")
	bytesServer            = []byte("server")
	bytesSetCookie         = []byte("set-cookie")
	bytesVary              = []byte("vary")
	bytesWWWAuthenticate   = []byte("www-authenticate")
)

var ( // misc http strings & byteses.
	// Strings
	stringColonPort80  = ":80"
	stringColonPort443 = ":443"
	stringSlash        = "/"
	stringAsterisk     = "*"
	// Byteses
	bytesColonPort80    = []byte(stringColonPort80)
	bytesColonPort443   = []byte(stringColonPort443)
	bytesSlash          = []byte(stringSlash)
	bytesAsterisk       = []byte(stringAsterisk)
	bytesGET            = []byte("GET")
	bytes100Continue    = []byte("100-continue")
	bytesBoundary       = []byte("boundary")
	bytesBytes          = []byte("bytes")
	bytesBytesEqual     = []byte("bytes=")
	bytesChunked        = []byte("chunked")
	bytesClose          = []byte("close")
	bytesColonSpace     = []byte(": ")
	bytesCompress       = []byte("compress")
	bytesCRLF           = []byte("\r\n")
	bytesDeflate        = []byte("deflate")
	bytesFilename       = []byte("filename")
	bytesFormData       = []byte("form-data")
	bytesGzip           = []byte("gzip")
	bytesBrotli         = []byte("br")
	bytesIdentity       = []byte("identity")
	bytesURLEncodedForm = []byte("application/x-www-form-urlencoded")
	bytesMultipartForm  = []byte("multipart/form-data")
	bytesName           = []byte("name")
	bytesNone           = []byte("none")
	bytesHTMLUTF8       = []byte("text/html; charset=utf-8")
	bytesTrailers       = []byte("trailers")
	bytesWebSocket      = []byte("websocket")
	bytesGorox          = []byte("gorox")
	// HTTP/2 and HTTP/3 byteses, TODO
	bytesSchemeHTTP           = []byte(":scheme http")
	bytesSchemeHTTPS          = []byte(":scheme https")
	bytesFixedRequestHeaders  = []byte("user-agent gorox")
	bytesFixedResponseHeaders = []byte("server gorox")
)

var httpTchar = [256]int8{ // tchar = ALPHA / DIGIT / "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, //   !   # $ % & '     * +   - .
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0 1 2 3 4 5 6 7 8 9
	0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, //   A B C D E F G H I J K L M N O
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 3, // P Q R S T U V W X Y Z       ^ _
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // ` a b c d e f g h i j k l m n o
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, // p q r s t u v w x y z   |   ~
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}
var httpPchar = [256]int8{ // pchar = ALPHA / DIGIT / "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / "-" / "." / ":" / ";" / "=" / "@" / "_" / "~" / pct-encoded. '/' is pchar to improve performance.
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //   !     $   & ' ( ) * + , - . /
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 2, // 0 1 2 3 4 5 6 7 8 9 : ;   =   ? // '?' is set to 2 to improve performance
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // @ A B C D E F G H I J K L M N O
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // P Q R S T U V W X Y Z         _
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //   a b c d e f g h i j k l m n o
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, // p q r s t u v w x y z       ~
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}
var httpKchar = [256]int8{ // cookie-octet = 0x21 / 0x23-0x2B / 0x2D-0x3A / 0x3C-0x5B / 0x5D-0x7E
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, //   !   # $ % & ' ( ) * +   - . /
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, // 0 1 2 3 4 5 6 7 8 9 :   < = > ?
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // @ A B C D E F G H I J K L M N O
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // P Q R S T U V W X Y Z [   ] ^ _
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // ` a b c d e f g h i j k l m n o
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // p q r s t u v w x y z { | } ~
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}
var httpNchar = [256]int8{ // for hostname
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, //                           - .
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 0 1 2 3 4 5 6 7 8 9
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, //   a b c d e f g h i j k l m n o
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, // p q r s t u v w x y z
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}

var httpHuffmanCodes = [256]uint32{ // 1K, for huffman encoding
	0x00001ff8, 0x007fffd8, 0x0fffffe2, 0x0fffffe3, 0x0fffffe4, 0x0fffffe5, 0x0fffffe6, 0x0fffffe7,
	0x0fffffe8, 0x00ffffea, 0x3ffffffc, 0x0fffffe9, 0x0fffffea, 0x3ffffffd, 0x0fffffeb, 0x0fffffec,
	0x0fffffed, 0x0fffffee, 0x0fffffef, 0x0ffffff0, 0x0ffffff1, 0x0ffffff2, 0x3ffffffe, 0x0ffffff3,
	0x0ffffff4, 0x0ffffff5, 0x0ffffff6, 0x0ffffff7, 0x0ffffff8, 0x0ffffff9, 0x0ffffffa, 0x0ffffffb,
	0x00000014, 0x000003f8, 0x000003f9, 0x00000ffa, 0x00001ff9, 0x00000015, 0x000000f8, 0x000007fa,
	0x000003fa, 0x000003fb, 0x000000f9, 0x000007fb, 0x000000fa, 0x00000016, 0x00000017, 0x00000018,
	0x00000000, 0x00000001, 0x00000002, 0x00000019, 0x0000001a, 0x0000001b, 0x0000001c, 0x0000001d,
	0x0000001e, 0x0000001f, 0x0000005c, 0x000000fb, 0x00007ffc, 0x00000020, 0x00000ffb, 0x000003fc,
	0x00001ffa, 0x00000021, 0x0000005d, 0x0000005e, 0x0000005f, 0x00000060, 0x00000061, 0x00000062,
	0x00000063, 0x00000064, 0x00000065, 0x00000066, 0x00000067, 0x00000068, 0x00000069, 0x0000006a,
	0x0000006b, 0x0000006c, 0x0000006d, 0x0000006e, 0x0000006f, 0x00000070, 0x00000071, 0x00000072,
	0x000000fc, 0x00000073, 0x000000fd, 0x00001ffb, 0x0007fff0, 0x00001ffc, 0x00003ffc, 0x00000022,
	0x00007ffd, 0x00000003, 0x00000023, 0x00000004, 0x00000024, 0x00000005, 0x00000025, 0x00000026,
	0x00000027, 0x00000006, 0x00000074, 0x00000075, 0x00000028, 0x00000029, 0x0000002a, 0x00000007,
	0x0000002b, 0x00000076, 0x0000002c, 0x00000008, 0x00000009, 0x0000002d, 0x00000077, 0x00000078,
	0x00000079, 0x0000007a, 0x0000007b, 0x00007ffe, 0x000007fc, 0x00003ffd, 0x00001ffd, 0x0ffffffc,
	0x000fffe6, 0x003fffd2, 0x000fffe7, 0x000fffe8, 0x003fffd3, 0x003fffd4, 0x003fffd5, 0x007fffd9,
	0x003fffd6, 0x007fffda, 0x007fffdb, 0x007fffdc, 0x007fffdd, 0x007fffde, 0x00ffffeb, 0x007fffdf,
	0x00ffffec, 0x00ffffed, 0x003fffd7, 0x007fffe0, 0x00ffffee, 0x007fffe1, 0x007fffe2, 0x007fffe3,
	0x007fffe4, 0x001fffdc, 0x003fffd8, 0x007fffe5, 0x003fffd9, 0x007fffe6, 0x007fffe7, 0x00ffffef,
	0x003fffda, 0x001fffdd, 0x000fffe9, 0x003fffdb, 0x003fffdc, 0x007fffe8, 0x007fffe9, 0x001fffde,
	0x007fffea, 0x003fffdd, 0x003fffde, 0x00fffff0, 0x001fffdf, 0x003fffdf, 0x007fffeb, 0x007fffec,
	0x001fffe0, 0x001fffe1, 0x003fffe0, 0x001fffe2, 0x007fffed, 0x003fffe1, 0x007fffee, 0x007fffef,
	0x000fffea, 0x003fffe2, 0x003fffe3, 0x003fffe4, 0x007ffff0, 0x003fffe5, 0x003fffe6, 0x007ffff1,
	0x03ffffe0, 0x03ffffe1, 0x000fffeb, 0x0007fff1, 0x003fffe7, 0x007ffff2, 0x003fffe8, 0x01ffffec,
	0x03ffffe2, 0x03ffffe3, 0x03ffffe4, 0x07ffffde, 0x07ffffdf, 0x03ffffe5, 0x00fffff1, 0x01ffffed,
	0x0007fff2, 0x001fffe3, 0x03ffffe6, 0x07ffffe0, 0x07ffffe1, 0x03ffffe7, 0x07ffffe2, 0x00fffff2,
	0x001fffe4, 0x001fffe5, 0x03ffffe8, 0x03ffffe9, 0x0ffffffd, 0x07ffffe3, 0x07ffffe4, 0x07ffffe5,
	0x000fffec, 0x00fffff3, 0x000fffed, 0x001fffe6, 0x003fffe9, 0x001fffe7, 0x001fffe8, 0x007ffff3,
	0x003fffea, 0x003fffeb, 0x01ffffee, 0x01ffffef, 0x00fffff4, 0x00fffff5, 0x03ffffea, 0x007ffff4,
	0x03ffffeb, 0x07ffffe6, 0x03ffffec, 0x03ffffed, 0x07ffffe7, 0x07ffffe8, 0x07ffffe9, 0x07ffffea,
	0x07ffffeb, 0x0ffffffe, 0x07ffffec, 0x07ffffed, 0x07ffffee, 0x07ffffef, 0x07fffff0, 0x03ffffee,
}
var httpHuffmanSizes = [256]uint8{ // 256B, for huffman encoding
	0x0d, 0x17, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x18, 0x1e, 0x1c, 0x1c, 0x1e, 0x1c, 0x1c,
	0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1e, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c,
	0x06, 0x0a, 0x0a, 0x0c, 0x0d, 0x06, 0x08, 0x0b, 0x0a, 0x0a, 0x08, 0x0b, 0x08, 0x06, 0x06, 0x06,
	0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x08, 0x0f, 0x06, 0x0c, 0x0a,
	0x0d, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07, 0x08, 0x0d, 0x13, 0x0d, 0x0e, 0x06,
	0x0f, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x06, 0x06, 0x05, 0x07, 0x07, 0x06, 0x06, 0x06, 0x05,
	0x06, 0x07, 0x06, 0x05, 0x05, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0b, 0x0e, 0x0d, 0x1c,
	0x14, 0x16, 0x14, 0x14, 0x16, 0x16, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17,
	0x18, 0x18, 0x16, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x15, 0x16, 0x17, 0x16, 0x17, 0x17, 0x18,
	0x16, 0x15, 0x14, 0x16, 0x16, 0x17, 0x17, 0x15, 0x17, 0x16, 0x16, 0x18, 0x15, 0x16, 0x17, 0x17,
	0x15, 0x15, 0x16, 0x15, 0x17, 0x16, 0x17, 0x17, 0x14, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x17,
	0x1a, 0x1a, 0x14, 0x13, 0x16, 0x17, 0x16, 0x19, 0x1a, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x18, 0x19,
	0x13, 0x15, 0x1a, 0x1b, 0x1b, 0x1a, 0x1b, 0x18, 0x15, 0x15, 0x1a, 0x1a, 0x1c, 0x1b, 0x1b, 0x1b,
	0x14, 0x18, 0x14, 0x15, 0x16, 0x15, 0x15, 0x17, 0x16, 0x16, 0x19, 0x19, 0x18, 0x18, 0x1a, 0x17,
	0x1a, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1c, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1a,
}
var httpHuffmanTable = [256][16]struct{ next, sym, emit, end byte }{ // 16K, for huffman decoding
	// TODO
	0x00: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x01: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x02: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x03: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x04: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x05: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x06: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x07: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x08: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x09: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x0f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x10: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x11: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x12: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x13: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x14: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x15: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x16: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x17: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x18: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x19: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x1f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x20: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x21: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x22: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x23: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x24: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x25: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x26: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x27: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x28: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x29: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x2f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x30: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x31: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x32: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x33: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x34: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x35: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x36: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x37: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x38: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x39: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x3f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x40: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x41: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x42: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x43: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x44: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x45: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x46: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x47: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x48: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x49: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x4f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x50: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x51: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x52: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x53: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x54: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x55: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x56: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x57: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x58: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x59: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x5f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x60: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x61: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x62: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x63: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x64: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x65: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x66: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x67: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x68: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x69: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x6f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x70: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x71: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x72: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x73: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x74: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x75: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x76: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x77: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x78: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x79: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x7f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x80: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x81: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x82: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x83: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x84: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x85: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x86: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x87: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x88: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x89: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x8f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x90: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x91: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x92: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x93: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x94: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x95: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x96: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x97: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x98: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x99: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9a: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9b: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9c: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9d: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9e: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0x9f: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xa9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xaa: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xab: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xac: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xad: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xae: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xaf: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xb9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xba: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xbb: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xbc: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xbd: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xbe: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xbf: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xc9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xca: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xcb: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xcc: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xcd: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xce: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xcf: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xd9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xda: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xdb: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xdc: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xdd: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xde: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xdf: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xe9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xea: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xeb: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xec: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xed: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xee: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xef: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf0: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf1: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf2: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf3: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf4: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf5: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf6: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf7: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf8: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xf9: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xfa: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xfb: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xfc: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xfd: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xfe: {
		{0x04, 0x00, 0, 0}, {0x05, 0x00, 0, 0}, {0x07, 0x00, 0, 0}, {0x08, 0x00, 0, 0},
		{0x0b, 0x00, 0, 0}, {0x0c, 0x00, 0, 0}, {0x10, 0x00, 0, 0}, {0x13, 0x00, 0, 0},
		{0x19, 0x00, 0, 0}, {0x1c, 0x00, 0, 0}, {0x20, 0x00, 0, 0}, {0x23, 0x00, 0, 0},
		{0x2a, 0x00, 0, 0}, {0x31, 0x00, 0, 0}, {0x39, 0x00, 0, 0}, {0x40, 0x00, 0, 1},
	},
	0xff: {
		{0x03, 0x16, 1, 0}, {0x06, 0x16, 1, 0}, {0x0a, 0x16, 1, 0}, {0x0f, 0x16, 1, 0},
		{0x18, 0x16, 1, 0}, {0x1f, 0x16, 1, 0}, {0x29, 0x16, 1, 0}, {0x38, 0x16, 1, 1},
		{0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0},
		{0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0}, {0xff, 0x00, 0, 0},
	},
}
