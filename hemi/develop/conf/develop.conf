// For develop only. Create and use your own config file if you are a committer.

stage {
	// fixtures

	// backends
	tcpxBackend "tb1" {
		node {
			.address = "127.0.0.1:3306"
			.weight = 1
		}
	}
	fcgiBackend "tb2" {
		.balancer = "random"
		node {
			.address = "127.0.0.1:9000"
			.weight = 1
		}
		node {
			.address = "127.0.0.1:9001"
			.weight = 2
		}
		node {
			.address = "127.0.0.1:9002"
			.weight = 3
		}
	}
	http1Backend "h1b1" {
		.balancer          = "roundRobin"
		.aliveTimeout      = 4s
		.maxStreamsPerConn = 1000
		node {
			.address = "127.0.0.1:3080"
			.weight = 9
			.keepAliveConns = 2
		}
		node {
			.address = "127.0.0.1:3081"
			.weight = 8
			.keepAliveConns = 3
		}
	}

	// routers
	quixRouter "quix1" {
		.address = ":8877"
	}
	tcpxRouter "tcpx1" {
		.address = ":8899"
		/*
		case $srcHost == "192.168.1.2" {
			fooDealet {}
		}
		case {
			tcpxProxy {
				.toBackend = "tb1"
			}
		}
		*/
	}
	udpxRouter "udpx1" {
		.address = ":8866"
	}

	// staters
	localStater "ls1" {
	}

	// cachers
	localCacher "lc1" {
	}

	// services
	service "testee" {
		#.aa = "bb"
	}

	// webapps
	webapp "testee" {
		.hostnames = ("*")
		.webRoot   = %topDir + "/apps/testee/root"

		// rules
		rule $hostname == ("hello.gorox.net") {
			httpProxy {
				.toBackend  = "h1b1"
				.withCacher = "lc1"
				.hostname   = ""      // use $hostname if empty
				.colonPort  = ":3080" // use $colonPort if empty
				.bufferServerContent = false
				.delRequestHeaders = ("header1", "header2")
				.addRequestHeaders = [
					"field1": "value1",
					"field2": "value2",
				]
				.delResponseHeaders = ("header3", "header4")
				.addResponseHeaders = [
					"field3": "value3",
					"field4": "value4",
				]
			}
		}
		rule $hostname == "127.0.0.1" {
			httpProxy {
				.toBackend = "h1b1"
				#.bufferClientContent = false
				.bufferServerContent = false
			}
		}

		rule $path == "/favicon.ico" {
			favicon {}
		}
		rule $path == "/xx" {
			.returnCode = 200
			.returnText = "bye bye"
		}
		rule $path == "/fcgi" {
			fcgiProxy {
				.toBackend = "tb2"
			}
		}

		rule {
			testeeHandlet {}
		}
	}

	// servers
	http1Server "main" {
		.address           = ":4080"
		.tlsMode           = false
		.webapps           = ("testee")
		.numGates          = 2
		.maxConnsPerGate   = 10000
		.maxStreamsPerConn = 10000
		.readTimeout       = 60s
		.writeTimeout      = 60s
		.tlsEnableHTTP2    = false
	}
	echoServer "echo" {
		.address = ":4007"
	}

	// cronjobs
}
