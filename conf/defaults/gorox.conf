// This file shows definitions of all components in Gorox, with their properties
// and default values. Names of the components are examples only.

// Don't use this file as config file directly!

stage {
	.cpuFile = %tempDir + "/cpu.prof"
	.hepFile = %tempDir + "/hep.prof"
	.thrFile = %tempDir + "/thr.prof"
	.grtFile = %tempDir + "/grt.prof"
	.blkFile = %tempDir + "/blk.prof"

	// fixtures. fixtures are singletons
	clock {
	}
	fcache {
		.smallFileSize = 65535
		.maxSmallFiles = 1000
		.maxLargeFiles = 500
		.cacheTimeout  = 1s
	}
	resolv {
	}
	quicOutgate {
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
	}
	qudsOutgate {
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
	}
	tcpsOutgate {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
	}
	tudsOutgate {
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
	}
	udpsOutgate {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
	}
	uudsOutgate {
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
	}
	http1Outgate {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/outgates/http1Outgate"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	http2Outgate {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/outgates/http2Outgate"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}
	http3Outgate {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/outgates/http3Outgate"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
	}

	// runners
	demoRunner "dr1" {
	}

	// backends
	http1Backend "h1b1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h1b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "roundRobin"
	}
	http2Backend "h2b1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h2b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "roundRobin"
	}
	http3Backend "h3b1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.saveContentFilesDir = %tempDir + "/web/backends/h3b"
		.maxContentSize = 1T
		.sendTimeout = 60s
		.recvTimeout = 60s
		.balancer = "ipHash"
	}
	quicBackend "qb1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.balancer = "random"
	}
	tcpsBackend "tb1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.maxStreamsPerConn = 1000
		.balancer = "random"
	}
	udpsBackend "ub1" {
		.tlsMode = false
		.dialTimeout = 10s
		.writeTimeout = 30s
		.readTimeout = 30s
		.aliveTimeout = 5s
		.nodes = (
			["address": "127.0.0.1:3080", "weight": 9, "keepConns": 2],
			["address": "127.0.0.1:3080", "weight": 8, "keepConns": 3],
		)
		.balancer = "random"
	}

	// meshers
	quicMesher "qm1" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000

		// dealers
		quicProxy "qp1" {
		}

		// editors

		// cases
	}
	tcpsMesher "tm1" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000

		// dealers
		accessDealer "ad1" {
		}
		echoDealer "ed1" {
		}
		helloDealer "hd1" {
		}
		mysqlProxy "mp1" {
		}
		pgsqlProxy "pp1" {
		}
		redisProxy "rp1" {
		}
		tcpsProxy "tp1" {
		}

		// editors
		mysqlViewer "mv1" {
		}
		pgsqlViewer "pv1" {
		}
		redisViewer "rv1" {
		}

		// cases
	}
	udpsMesher "um1" {
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000

		// dealers
		dnsDealer "dd1" {
		}
		udpsProxy "up1" {
		}

		// editors

		// cases
	}

	// staters
	localStater "ls1" {
		.stateDir = %varsDir + "/staters/ls"
	}
	redisStater "rs1" {
	}

	// storers
	localStorer "ls1" {
		.storeDir = %varsDir + "/storers/ls1"
	}
	memStorer "ms1" {
	}
	redisStorer "rs1" {
	}

	// apps
	app "a1" {
		.hostnames            = ("*")
		.webRoot              = ""
		.file404              = ""
		.tlsCertificate       = ""
		.tlsPrivateKey        = ""
		.accessLog            = []
		.maxMemoryContentSize = 16M
		.maxUploadContentSize = 128M
		.settings             = []
		.proxyOnly            = false
		.withStater           = "ls"
		.saveContentFilesDir  = %tempDir + "/web/apps/a1"

		// handlets
		accessChecker "ac1" {
			.deny = ("all")
			.allow = ("10.100.1.1/16", "127.0.0.1", "::1", "192.168.1.1/24")
		}
		favicon "f1" {
		}
		hostnameChecker "hc1" {
			.hostname = "www.example.cpm"
			.permanent = true
		}
		httpsChecker "hc1" {
			.authority = "www.example.cpm"
			.permanent = true
		}
		limitChecker "lc1" {
		}
		mp4Handlet "mh1" {
		}
		refererChecker "rc1" {
			.serverNames = ("*.gorox.com")
			.none = false
			.blocked = false
		}
		rewriter "r1" {
		}
		sitex "s1" {
			.rdbms = "mysql://user:pass@host:port/dbname?charset=utf8mb4"
			.sites = [
				"front": [
					"hostnames": ("example.net"),
					"viewDir": %baseDir + "/apps/en_us/view",
					"settings": [
						"en_us": "example.net",
						"zh_cn": "www.example.net",
					],
				],
			]
		}
		webdavHandlet "wh1" {
		}
		static "s1" {
			.webRoot = %baseDir + "/apps/a1/root"
			.indexFile = "index.html"
			.autoIndex = true
			.mimeTypes = [
				"jpg": "image/jpeg",
				"jpeg": "image/jpeg",
			]
			.defaultType = "application/octet-stream"
		}
		ajpProxy "ap1" {
		}
		fcgiProxy "fp1" {
			.saveContentFilesDir = %tempDir + "/web/fcgi/fp1"
			.toBackend = "php-fpm"
			.sendTimeout = 60s
			.recvTimeout = 60s
			.scriptFilename = ""
			.indexFile = "index.php"
			.keepConn = true
			.bufferClientContent = true
			.bufferServerContent = true
			.preferUnderscore = true
			.withStorer = "storer name"
		}
		http1Proxy "h1p1" {
			.proxyMode = "reverse"
			.toBackend = "proxy_name"
			.viaName = "gorox"
			.bufferClientContent = true
			.bufferServerContent = true
			.delRequestHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addRequestHeaders = (
				["x-root-id" : "xxx-xxx-xxx-xxx"],
			)

			.delResponseHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addResponseHeaders = (
				["cache-control" : "max-age=86400"],
			)
		}
		http2Proxy "h2p1" {
			.proxyMode = "reverse"
			.toBackend = "proxy_name"
			.viaName = "gorox"
			.bufferClientContent = true
			.bufferServerContent = true
			.delRequestHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addRequestHeaders = (
				["x-root-id" : "xxx-xxx-xxx-xxx"],
			)

			.delResponseHeaders = ("sec-ch-ua-platform", "sec-ch-ua")
			.addResponseHeaders = (
				["cache-control" : "max-age=86400"],
			)
		}
		http3Proxy "h3p1" {
		}
		uwsgiProxy "up1" {
		}

		// revisers
		gunzipReviser "gr1" {
		}
		gzipReviser "gr1" {
			.compressLevel = 1
			.minLength = 8k 
			.onContentTypes = ("text/html") 
		}
		headReviser "hr1" {
			.addResponse = ["cache-control" : "max-age=86400"]
			.addRequest = ["env" : "gray"]
			.delRequest = ("cookie", "date")
			.delResponse = ("cookie", "date")
		}
		replaceReviser "rr1" {
		}
		ssiReviser "sr1" {
		}
		wrapReviser "wr1" {
		}

		// socklets
		helloSocklet "hs1" {
		}
		sock1Proxy "s1p1" {
		}
		sock2Proxy "s2p1" {
		}
		sock3Proxy "s3p1" {
		}

		// rules
	}

	// svcs
	svc "s1" {
		.withStater = "Stater name"
		.maxContentSize = 16G
	}

	// servers
	echoServer "es1" {
	}
	socksServer "ss1" {
	}
	httpxServer "hxs1" {
		.forApps         = ("foo", "bar")
		.address         = string,required
		.tlsMode         = false
		.readTimeout     = 60s
		.writeTimeout    = 60s
		.numGates        = runtime.NumCPU()
		.maxConnsPerGate = 100000
		.enableTCPTun    = false
		.enableUDPTun    = false
		.maxContentSize  = 1T
		.recvTimeout     = 120s
		.sendTimeout     = 120s
		.forceScheme     = ""
		.adjustScheme    = true
		.enableHTTP2     = false
		.h2cMode         = false
	}
	http3Server "h3s1" {
	}

	// cronjobs
	cleanCronjob "cc1" {
	}
	statCronjob "sc1" {
	}
}
